
quantium-driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002094  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c0  080021a0  080021a0  000121a0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002460  08002460  00012460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002464  08002464  00012464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  08002468  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001ac  20000070  080024d8  00020070  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000021c  080024d8  0002021c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_info   000108ee  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002131  00000000  00000000  00030987  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005d3e  00000000  00000000  00032ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000840  00000000  00000000  000387f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000aa0  00000000  00000000  00039038  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000047a4  00000000  00000000  00039ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003398  00000000  00000000  0003e27c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00041614  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001bc8  00000000  00000000  00041690  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002188 	.word	0x08002188

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002188 	.word	0x08002188

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800015c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800015e:	4b0e      	ldr	r3, [pc, #56]	; (8000198 <HAL_InitTick+0x3c>)
{
 8000160:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000162:	7818      	ldrb	r0, [r3, #0]
 8000164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000168:	fbb3 f3f0 	udiv	r3, r3, r0
 800016c:	4a0b      	ldr	r2, [pc, #44]	; (800019c <HAL_InitTick+0x40>)
 800016e:	6810      	ldr	r0, [r2, #0]
 8000170:	fbb0 f0f3 	udiv	r0, r0, r3
 8000174:	f000 f89e 	bl	80002b4 <HAL_SYSTICK_Config>
 8000178:	4604      	mov	r4, r0
 800017a:	b958      	cbnz	r0, 8000194 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800017c:	2d0f      	cmp	r5, #15
 800017e:	d809      	bhi.n	8000194 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000180:	4602      	mov	r2, r0
 8000182:	4629      	mov	r1, r5
 8000184:	f04f 30ff 	mov.w	r0, #4294967295
 8000188:	f000 f854 	bl	8000234 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <HAL_InitTick+0x44>)
 800018e:	4620      	mov	r0, r4
 8000190:	601d      	str	r5, [r3, #0]
 8000192:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000194:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000196:	bd38      	pop	{r3, r4, r5, pc}
 8000198:	20000000 	.word	0x20000000
 800019c:	20000008 	.word	0x20000008
 80001a0:	20000004 	.word	0x20000004

080001a4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a4:	4a07      	ldr	r2, [pc, #28]	; (80001c4 <HAL_Init+0x20>)
{
 80001a6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001aa:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001ac:	f043 0310 	orr.w	r3, r3, #16
 80001b0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001b2:	f000 f82d 	bl	8000210 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001b6:	2000      	movs	r0, #0
 80001b8:	f7ff ffd0 	bl	800015c <HAL_InitTick>
  HAL_MspInit();
 80001bc:	f001 f9f4 	bl	80015a8 <HAL_MspInit>
}
 80001c0:	2000      	movs	r0, #0
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	40022000 	.word	0x40022000

080001c8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001c8:	4a03      	ldr	r2, [pc, #12]	; (80001d8 <HAL_IncTick+0x10>)
 80001ca:	4b04      	ldr	r3, [pc, #16]	; (80001dc <HAL_IncTick+0x14>)
 80001cc:	6811      	ldr	r1, [r2, #0]
 80001ce:	781b      	ldrb	r3, [r3, #0]
 80001d0:	440b      	add	r3, r1
 80001d2:	6013      	str	r3, [r2, #0]
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	200000a0 	.word	0x200000a0
 80001dc:	20000000 	.word	0x20000000

080001e0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001e0:	4b01      	ldr	r3, [pc, #4]	; (80001e8 <HAL_GetTick+0x8>)
 80001e2:	6818      	ldr	r0, [r3, #0]
}
 80001e4:	4770      	bx	lr
 80001e6:	bf00      	nop
 80001e8:	200000a0 	.word	0x200000a0

080001ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001ec:	b538      	push	{r3, r4, r5, lr}
 80001ee:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001f0:	f7ff fff6 	bl	80001e0 <HAL_GetTick>
 80001f4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001f6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001f8:	bf1e      	ittt	ne
 80001fa:	4b04      	ldrne	r3, [pc, #16]	; (800020c <HAL_Delay+0x20>)
 80001fc:	781b      	ldrbne	r3, [r3, #0]
 80001fe:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000200:	f7ff ffee 	bl	80001e0 <HAL_GetTick>
 8000204:	1b40      	subs	r0, r0, r5
 8000206:	4284      	cmp	r4, r0
 8000208:	d8fa      	bhi.n	8000200 <HAL_Delay+0x14>
  {
  }
}
 800020a:	bd38      	pop	{r3, r4, r5, pc}
 800020c:	20000000 	.word	0x20000000

08000210 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000210:	4a07      	ldr	r2, [pc, #28]	; (8000230 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000212:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000214:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000216:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800021a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800021e:	041b      	lsls	r3, r3, #16
 8000220:	0c1b      	lsrs	r3, r3, #16
 8000222:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000226:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800022a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800022c:	60d3      	str	r3, [r2, #12]
 800022e:	4770      	bx	lr
 8000230:	e000ed00 	.word	0xe000ed00

08000234 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000234:	4b17      	ldr	r3, [pc, #92]	; (8000294 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000236:	b530      	push	{r4, r5, lr}
 8000238:	68dc      	ldr	r4, [r3, #12]
 800023a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800023e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000242:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000244:	2b04      	cmp	r3, #4
 8000246:	bf28      	it	cs
 8000248:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800024a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800024c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000250:	bf98      	it	ls
 8000252:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000254:	fa05 f303 	lsl.w	r3, r5, r3
 8000258:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800025c:	bf88      	it	hi
 800025e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000260:	4019      	ands	r1, r3
 8000262:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000264:	fa05 f404 	lsl.w	r4, r5, r4
 8000268:	3c01      	subs	r4, #1
 800026a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800026c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800026e:	ea42 0201 	orr.w	r2, r2, r1
 8000272:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000276:	bfaf      	iteee	ge
 8000278:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027c:	4b06      	ldrlt	r3, [pc, #24]	; (8000298 <HAL_NVIC_SetPriority+0x64>)
 800027e:	f000 000f 	andlt.w	r0, r0, #15
 8000282:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000284:	bfa5      	ittet	ge
 8000286:	b2d2      	uxtbge	r2, r2
 8000288:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028c:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028e:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000292:	bd30      	pop	{r4, r5, pc}
 8000294:	e000ed00 	.word	0xe000ed00
 8000298:	e000ed14 	.word	0xe000ed14

0800029c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800029c:	2301      	movs	r3, #1
 800029e:	0942      	lsrs	r2, r0, #5
 80002a0:	f000 001f 	and.w	r0, r0, #31
 80002a4:	fa03 f000 	lsl.w	r0, r3, r0
 80002a8:	4b01      	ldr	r3, [pc, #4]	; (80002b0 <HAL_NVIC_EnableIRQ+0x14>)
 80002aa:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80002ae:	4770      	bx	lr
 80002b0:	e000e100 	.word	0xe000e100

080002b4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002b4:	3801      	subs	r0, #1
 80002b6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002ba:	d20a      	bcs.n	80002d2 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002bc:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002be:	4b06      	ldr	r3, [pc, #24]	; (80002d8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c0:	4a06      	ldr	r2, [pc, #24]	; (80002dc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002c2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002c8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002ca:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002cc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002ce:	601a      	str	r2, [r3, #0]
 80002d0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002d2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	e000e010 	.word	0xe000e010
 80002dc:	e000ed00 	.word	0xe000ed00

080002e0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80002e0:	4b04      	ldr	r3, [pc, #16]	; (80002f4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80002e2:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80002e4:	681a      	ldr	r2, [r3, #0]
 80002e6:	bf0c      	ite	eq
 80002e8:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80002ec:	f022 0204 	bicne.w	r2, r2, #4
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	4770      	bx	lr
 80002f4:	e000e010 	.word	0xe000e010

080002f8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80002f8:	4770      	bx	lr

080002fa <HAL_SYSTICK_IRQHandler>:
{
 80002fa:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80002fc:	f7ff fffc 	bl	80002f8 <HAL_SYSTICK_Callback>
 8000300:	bd08      	pop	{r3, pc}
	...

08000304 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000304:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000308:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800030a:	4616      	mov	r6, r2
 800030c:	4b65      	ldr	r3, [pc, #404]	; (80004a4 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800030e:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80004b4 <HAL_GPIO_Init+0x1b0>
 8000312:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80004b8 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8000316:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800031a:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 800031c:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000320:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8000324:	45a0      	cmp	r8, r4
 8000326:	d17f      	bne.n	8000428 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8000328:	684d      	ldr	r5, [r1, #4]
 800032a:	2d12      	cmp	r5, #18
 800032c:	f000 80af 	beq.w	800048e <HAL_GPIO_Init+0x18a>
 8000330:	f200 8088 	bhi.w	8000444 <HAL_GPIO_Init+0x140>
 8000334:	2d02      	cmp	r5, #2
 8000336:	f000 80a7 	beq.w	8000488 <HAL_GPIO_Init+0x184>
 800033a:	d87c      	bhi.n	8000436 <HAL_GPIO_Init+0x132>
 800033c:	2d00      	cmp	r5, #0
 800033e:	f000 808e 	beq.w	800045e <HAL_GPIO_Init+0x15a>
 8000342:	2d01      	cmp	r5, #1
 8000344:	f000 809e 	beq.w	8000484 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000348:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800034c:	2cff      	cmp	r4, #255	; 0xff
 800034e:	bf93      	iteet	ls
 8000350:	4682      	movls	sl, r0
 8000352:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000356:	3d08      	subhi	r5, #8
 8000358:	f8d0 b000 	ldrls.w	fp, [r0]
 800035c:	bf92      	itee	ls
 800035e:	00b5      	lslls	r5, r6, #2
 8000360:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000364:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000366:	fa09 f805 	lsl.w	r8, r9, r5
 800036a:	ea2b 0808 	bic.w	r8, fp, r8
 800036e:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000372:	bf88      	it	hi
 8000374:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000378:	ea48 0505 	orr.w	r5, r8, r5
 800037c:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000380:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000384:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000388:	d04e      	beq.n	8000428 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800038a:	4d47      	ldr	r5, [pc, #284]	; (80004a8 <HAL_GPIO_Init+0x1a4>)
 800038c:	4f46      	ldr	r7, [pc, #280]	; (80004a8 <HAL_GPIO_Init+0x1a4>)
 800038e:	69ad      	ldr	r5, [r5, #24]
 8000390:	f026 0803 	bic.w	r8, r6, #3
 8000394:	f045 0501 	orr.w	r5, r5, #1
 8000398:	61bd      	str	r5, [r7, #24]
 800039a:	69bd      	ldr	r5, [r7, #24]
 800039c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80003a0:	f005 0501 	and.w	r5, r5, #1
 80003a4:	9501      	str	r5, [sp, #4]
 80003a6:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80003aa:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80003ae:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80003b0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 80003b4:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80003b8:	fa09 f90b 	lsl.w	r9, r9, fp
 80003bc:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80003c0:	4d3a      	ldr	r5, [pc, #232]	; (80004ac <HAL_GPIO_Init+0x1a8>)
 80003c2:	42a8      	cmp	r0, r5
 80003c4:	d068      	beq.n	8000498 <HAL_GPIO_Init+0x194>
 80003c6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003ca:	42a8      	cmp	r0, r5
 80003cc:	d066      	beq.n	800049c <HAL_GPIO_Init+0x198>
 80003ce:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003d2:	42a8      	cmp	r0, r5
 80003d4:	d064      	beq.n	80004a0 <HAL_GPIO_Init+0x19c>
 80003d6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003da:	42a8      	cmp	r0, r5
 80003dc:	bf0c      	ite	eq
 80003de:	2503      	moveq	r5, #3
 80003e0:	2504      	movne	r5, #4
 80003e2:	fa05 f50b 	lsl.w	r5, r5, fp
 80003e6:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80003ea:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80003ee:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003f0:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80003f4:	bf14      	ite	ne
 80003f6:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80003f8:	43a5      	biceq	r5, r4
 80003fa:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80003fc:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003fe:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000402:	bf14      	ite	ne
 8000404:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000406:	43a5      	biceq	r5, r4
 8000408:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800040a:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800040c:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000410:	bf14      	ite	ne
 8000412:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000414:	43a5      	biceq	r5, r4
 8000416:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000418:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800041a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800041e:	bf14      	ite	ne
 8000420:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000422:	ea25 0404 	biceq.w	r4, r5, r4
 8000426:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000428:	3601      	adds	r6, #1
 800042a:	2e10      	cmp	r6, #16
 800042c:	f47f af73 	bne.w	8000316 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8000430:	b003      	add	sp, #12
 8000432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8000436:	2d03      	cmp	r5, #3
 8000438:	d022      	beq.n	8000480 <HAL_GPIO_Init+0x17c>
 800043a:	2d11      	cmp	r5, #17
 800043c:	d184      	bne.n	8000348 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800043e:	68ca      	ldr	r2, [r1, #12]
 8000440:	3204      	adds	r2, #4
          break;
 8000442:	e781      	b.n	8000348 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000444:	4f1a      	ldr	r7, [pc, #104]	; (80004b0 <HAL_GPIO_Init+0x1ac>)
 8000446:	42bd      	cmp	r5, r7
 8000448:	d009      	beq.n	800045e <HAL_GPIO_Init+0x15a>
 800044a:	d812      	bhi.n	8000472 <HAL_GPIO_Init+0x16e>
 800044c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80004bc <HAL_GPIO_Init+0x1b8>
 8000450:	454d      	cmp	r5, r9
 8000452:	d004      	beq.n	800045e <HAL_GPIO_Init+0x15a>
 8000454:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000458:	454d      	cmp	r5, r9
 800045a:	f47f af75 	bne.w	8000348 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800045e:	688a      	ldr	r2, [r1, #8]
 8000460:	b1c2      	cbz	r2, 8000494 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000462:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000464:	bf0c      	ite	eq
 8000466:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800046a:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800046e:	2208      	movs	r2, #8
 8000470:	e76a      	b.n	8000348 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000472:	4575      	cmp	r5, lr
 8000474:	d0f3      	beq.n	800045e <HAL_GPIO_Init+0x15a>
 8000476:	4565      	cmp	r5, ip
 8000478:	d0f1      	beq.n	800045e <HAL_GPIO_Init+0x15a>
 800047a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80004c0 <HAL_GPIO_Init+0x1bc>
 800047e:	e7eb      	b.n	8000458 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000480:	2200      	movs	r2, #0
 8000482:	e761      	b.n	8000348 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000484:	68ca      	ldr	r2, [r1, #12]
          break;
 8000486:	e75f      	b.n	8000348 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000488:	68ca      	ldr	r2, [r1, #12]
 800048a:	3208      	adds	r2, #8
          break;
 800048c:	e75c      	b.n	8000348 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800048e:	68ca      	ldr	r2, [r1, #12]
 8000490:	320c      	adds	r2, #12
          break;
 8000492:	e759      	b.n	8000348 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000494:	2204      	movs	r2, #4
 8000496:	e757      	b.n	8000348 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000498:	2500      	movs	r5, #0
 800049a:	e7a2      	b.n	80003e2 <HAL_GPIO_Init+0xde>
 800049c:	2501      	movs	r5, #1
 800049e:	e7a0      	b.n	80003e2 <HAL_GPIO_Init+0xde>
 80004a0:	2502      	movs	r5, #2
 80004a2:	e79e      	b.n	80003e2 <HAL_GPIO_Init+0xde>
 80004a4:	40010400 	.word	0x40010400
 80004a8:	40021000 	.word	0x40021000
 80004ac:	40010800 	.word	0x40010800
 80004b0:	10210000 	.word	0x10210000
 80004b4:	10310000 	.word	0x10310000
 80004b8:	10320000 	.word	0x10320000
 80004bc:	10110000 	.word	0x10110000
 80004c0:	10220000 	.word	0x10220000

080004c4 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004c4:	6803      	ldr	r3, [r0, #0]
{
 80004c6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004ca:	07db      	lsls	r3, r3, #31
{
 80004cc:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004ce:	d410      	bmi.n	80004f2 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80004d0:	682b      	ldr	r3, [r5, #0]
 80004d2:	079f      	lsls	r7, r3, #30
 80004d4:	d45e      	bmi.n	8000594 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80004d6:	682b      	ldr	r3, [r5, #0]
 80004d8:	0719      	lsls	r1, r3, #28
 80004da:	f100 8095 	bmi.w	8000608 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80004de:	682b      	ldr	r3, [r5, #0]
 80004e0:	075a      	lsls	r2, r3, #29
 80004e2:	f100 80bf 	bmi.w	8000664 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80004e6:	69ea      	ldr	r2, [r5, #28]
 80004e8:	2a00      	cmp	r2, #0
 80004ea:	f040 812d 	bne.w	8000748 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80004ee:	2000      	movs	r0, #0
 80004f0:	e014      	b.n	800051c <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80004f2:	4c90      	ldr	r4, [pc, #576]	; (8000734 <HAL_RCC_OscConfig+0x270>)
 80004f4:	6863      	ldr	r3, [r4, #4]
 80004f6:	f003 030c 	and.w	r3, r3, #12
 80004fa:	2b04      	cmp	r3, #4
 80004fc:	d007      	beq.n	800050e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80004fe:	6863      	ldr	r3, [r4, #4]
 8000500:	f003 030c 	and.w	r3, r3, #12
 8000504:	2b08      	cmp	r3, #8
 8000506:	d10c      	bne.n	8000522 <HAL_RCC_OscConfig+0x5e>
 8000508:	6863      	ldr	r3, [r4, #4]
 800050a:	03de      	lsls	r6, r3, #15
 800050c:	d509      	bpl.n	8000522 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800050e:	6823      	ldr	r3, [r4, #0]
 8000510:	039c      	lsls	r4, r3, #14
 8000512:	d5dd      	bpl.n	80004d0 <HAL_RCC_OscConfig+0xc>
 8000514:	686b      	ldr	r3, [r5, #4]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d1da      	bne.n	80004d0 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800051a:	2001      	movs	r0, #1
}
 800051c:	b002      	add	sp, #8
 800051e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000522:	686b      	ldr	r3, [r5, #4]
 8000524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000528:	d110      	bne.n	800054c <HAL_RCC_OscConfig+0x88>
 800052a:	6823      	ldr	r3, [r4, #0]
 800052c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000530:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000532:	f7ff fe55 	bl	80001e0 <HAL_GetTick>
 8000536:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000538:	6823      	ldr	r3, [r4, #0]
 800053a:	0398      	lsls	r0, r3, #14
 800053c:	d4c8      	bmi.n	80004d0 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800053e:	f7ff fe4f 	bl	80001e0 <HAL_GetTick>
 8000542:	1b80      	subs	r0, r0, r6
 8000544:	2864      	cmp	r0, #100	; 0x64
 8000546:	d9f7      	bls.n	8000538 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000548:	2003      	movs	r0, #3
 800054a:	e7e7      	b.n	800051c <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800054c:	b99b      	cbnz	r3, 8000576 <HAL_RCC_OscConfig+0xb2>
 800054e:	6823      	ldr	r3, [r4, #0]
 8000550:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000554:	6023      	str	r3, [r4, #0]
 8000556:	6823      	ldr	r3, [r4, #0]
 8000558:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800055c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800055e:	f7ff fe3f 	bl	80001e0 <HAL_GetTick>
 8000562:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000564:	6823      	ldr	r3, [r4, #0]
 8000566:	0399      	lsls	r1, r3, #14
 8000568:	d5b2      	bpl.n	80004d0 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800056a:	f7ff fe39 	bl	80001e0 <HAL_GetTick>
 800056e:	1b80      	subs	r0, r0, r6
 8000570:	2864      	cmp	r0, #100	; 0x64
 8000572:	d9f7      	bls.n	8000564 <HAL_RCC_OscConfig+0xa0>
 8000574:	e7e8      	b.n	8000548 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000576:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800057a:	6823      	ldr	r3, [r4, #0]
 800057c:	d103      	bne.n	8000586 <HAL_RCC_OscConfig+0xc2>
 800057e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000582:	6023      	str	r3, [r4, #0]
 8000584:	e7d1      	b.n	800052a <HAL_RCC_OscConfig+0x66>
 8000586:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800058a:	6023      	str	r3, [r4, #0]
 800058c:	6823      	ldr	r3, [r4, #0]
 800058e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000592:	e7cd      	b.n	8000530 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000594:	4c67      	ldr	r4, [pc, #412]	; (8000734 <HAL_RCC_OscConfig+0x270>)
 8000596:	6863      	ldr	r3, [r4, #4]
 8000598:	f013 0f0c 	tst.w	r3, #12
 800059c:	d007      	beq.n	80005ae <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800059e:	6863      	ldr	r3, [r4, #4]
 80005a0:	f003 030c 	and.w	r3, r3, #12
 80005a4:	2b08      	cmp	r3, #8
 80005a6:	d110      	bne.n	80005ca <HAL_RCC_OscConfig+0x106>
 80005a8:	6863      	ldr	r3, [r4, #4]
 80005aa:	03da      	lsls	r2, r3, #15
 80005ac:	d40d      	bmi.n	80005ca <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80005ae:	6823      	ldr	r3, [r4, #0]
 80005b0:	079b      	lsls	r3, r3, #30
 80005b2:	d502      	bpl.n	80005ba <HAL_RCC_OscConfig+0xf6>
 80005b4:	692b      	ldr	r3, [r5, #16]
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d1af      	bne.n	800051a <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80005ba:	6823      	ldr	r3, [r4, #0]
 80005bc:	696a      	ldr	r2, [r5, #20]
 80005be:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80005c2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80005c6:	6023      	str	r3, [r4, #0]
 80005c8:	e785      	b.n	80004d6 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80005ca:	692a      	ldr	r2, [r5, #16]
 80005cc:	4b5a      	ldr	r3, [pc, #360]	; (8000738 <HAL_RCC_OscConfig+0x274>)
 80005ce:	b16a      	cbz	r2, 80005ec <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 80005d0:	2201      	movs	r2, #1
 80005d2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80005d4:	f7ff fe04 	bl	80001e0 <HAL_GetTick>
 80005d8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80005da:	6823      	ldr	r3, [r4, #0]
 80005dc:	079f      	lsls	r7, r3, #30
 80005de:	d4ec      	bmi.n	80005ba <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80005e0:	f7ff fdfe 	bl	80001e0 <HAL_GetTick>
 80005e4:	1b80      	subs	r0, r0, r6
 80005e6:	2802      	cmp	r0, #2
 80005e8:	d9f7      	bls.n	80005da <HAL_RCC_OscConfig+0x116>
 80005ea:	e7ad      	b.n	8000548 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80005ec:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80005ee:	f7ff fdf7 	bl	80001e0 <HAL_GetTick>
 80005f2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80005f4:	6823      	ldr	r3, [r4, #0]
 80005f6:	0798      	lsls	r0, r3, #30
 80005f8:	f57f af6d 	bpl.w	80004d6 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80005fc:	f7ff fdf0 	bl	80001e0 <HAL_GetTick>
 8000600:	1b80      	subs	r0, r0, r6
 8000602:	2802      	cmp	r0, #2
 8000604:	d9f6      	bls.n	80005f4 <HAL_RCC_OscConfig+0x130>
 8000606:	e79f      	b.n	8000548 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000608:	69aa      	ldr	r2, [r5, #24]
 800060a:	4c4a      	ldr	r4, [pc, #296]	; (8000734 <HAL_RCC_OscConfig+0x270>)
 800060c:	4b4b      	ldr	r3, [pc, #300]	; (800073c <HAL_RCC_OscConfig+0x278>)
 800060e:	b1da      	cbz	r2, 8000648 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000610:	2201      	movs	r2, #1
 8000612:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000614:	f7ff fde4 	bl	80001e0 <HAL_GetTick>
 8000618:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800061a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800061c:	079b      	lsls	r3, r3, #30
 800061e:	d50d      	bpl.n	800063c <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000620:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000624:	4b46      	ldr	r3, [pc, #280]	; (8000740 <HAL_RCC_OscConfig+0x27c>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	fbb3 f3f2 	udiv	r3, r3, r2
 800062c:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800062e:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000630:	9b01      	ldr	r3, [sp, #4]
 8000632:	1e5a      	subs	r2, r3, #1
 8000634:	9201      	str	r2, [sp, #4]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d1f9      	bne.n	800062e <HAL_RCC_OscConfig+0x16a>
 800063a:	e750      	b.n	80004de <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800063c:	f7ff fdd0 	bl	80001e0 <HAL_GetTick>
 8000640:	1b80      	subs	r0, r0, r6
 8000642:	2802      	cmp	r0, #2
 8000644:	d9e9      	bls.n	800061a <HAL_RCC_OscConfig+0x156>
 8000646:	e77f      	b.n	8000548 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000648:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800064a:	f7ff fdc9 	bl	80001e0 <HAL_GetTick>
 800064e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000650:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000652:	079f      	lsls	r7, r3, #30
 8000654:	f57f af43 	bpl.w	80004de <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000658:	f7ff fdc2 	bl	80001e0 <HAL_GetTick>
 800065c:	1b80      	subs	r0, r0, r6
 800065e:	2802      	cmp	r0, #2
 8000660:	d9f6      	bls.n	8000650 <HAL_RCC_OscConfig+0x18c>
 8000662:	e771      	b.n	8000548 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000664:	4c33      	ldr	r4, [pc, #204]	; (8000734 <HAL_RCC_OscConfig+0x270>)
 8000666:	69e3      	ldr	r3, [r4, #28]
 8000668:	00d8      	lsls	r0, r3, #3
 800066a:	d424      	bmi.n	80006b6 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 800066c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800066e:	69e3      	ldr	r3, [r4, #28]
 8000670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000674:	61e3      	str	r3, [r4, #28]
 8000676:	69e3      	ldr	r3, [r4, #28]
 8000678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000680:	4e30      	ldr	r6, [pc, #192]	; (8000744 <HAL_RCC_OscConfig+0x280>)
 8000682:	6833      	ldr	r3, [r6, #0]
 8000684:	05d9      	lsls	r1, r3, #23
 8000686:	d518      	bpl.n	80006ba <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000688:	68eb      	ldr	r3, [r5, #12]
 800068a:	2b01      	cmp	r3, #1
 800068c:	d126      	bne.n	80006dc <HAL_RCC_OscConfig+0x218>
 800068e:	6a23      	ldr	r3, [r4, #32]
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000696:	f7ff fda3 	bl	80001e0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800069a:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800069e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80006a0:	6a23      	ldr	r3, [r4, #32]
 80006a2:	079b      	lsls	r3, r3, #30
 80006a4:	d53f      	bpl.n	8000726 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 80006a6:	2f00      	cmp	r7, #0
 80006a8:	f43f af1d 	beq.w	80004e6 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 80006ac:	69e3      	ldr	r3, [r4, #28]
 80006ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80006b2:	61e3      	str	r3, [r4, #28]
 80006b4:	e717      	b.n	80004e6 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 80006b6:	2700      	movs	r7, #0
 80006b8:	e7e2      	b.n	8000680 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80006ba:	6833      	ldr	r3, [r6, #0]
 80006bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006c0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80006c2:	f7ff fd8d 	bl	80001e0 <HAL_GetTick>
 80006c6:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80006c8:	6833      	ldr	r3, [r6, #0]
 80006ca:	05da      	lsls	r2, r3, #23
 80006cc:	d4dc      	bmi.n	8000688 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80006ce:	f7ff fd87 	bl	80001e0 <HAL_GetTick>
 80006d2:	eba0 0008 	sub.w	r0, r0, r8
 80006d6:	2864      	cmp	r0, #100	; 0x64
 80006d8:	d9f6      	bls.n	80006c8 <HAL_RCC_OscConfig+0x204>
 80006da:	e735      	b.n	8000548 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006dc:	b9ab      	cbnz	r3, 800070a <HAL_RCC_OscConfig+0x246>
 80006de:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006e0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006e4:	f023 0301 	bic.w	r3, r3, #1
 80006e8:	6223      	str	r3, [r4, #32]
 80006ea:	6a23      	ldr	r3, [r4, #32]
 80006ec:	f023 0304 	bic.w	r3, r3, #4
 80006f0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80006f2:	f7ff fd75 	bl	80001e0 <HAL_GetTick>
 80006f6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80006f8:	6a23      	ldr	r3, [r4, #32]
 80006fa:	0798      	lsls	r0, r3, #30
 80006fc:	d5d3      	bpl.n	80006a6 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006fe:	f7ff fd6f 	bl	80001e0 <HAL_GetTick>
 8000702:	1b80      	subs	r0, r0, r6
 8000704:	4540      	cmp	r0, r8
 8000706:	d9f7      	bls.n	80006f8 <HAL_RCC_OscConfig+0x234>
 8000708:	e71e      	b.n	8000548 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800070a:	2b05      	cmp	r3, #5
 800070c:	6a23      	ldr	r3, [r4, #32]
 800070e:	d103      	bne.n	8000718 <HAL_RCC_OscConfig+0x254>
 8000710:	f043 0304 	orr.w	r3, r3, #4
 8000714:	6223      	str	r3, [r4, #32]
 8000716:	e7ba      	b.n	800068e <HAL_RCC_OscConfig+0x1ca>
 8000718:	f023 0301 	bic.w	r3, r3, #1
 800071c:	6223      	str	r3, [r4, #32]
 800071e:	6a23      	ldr	r3, [r4, #32]
 8000720:	f023 0304 	bic.w	r3, r3, #4
 8000724:	e7b6      	b.n	8000694 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000726:	f7ff fd5b 	bl	80001e0 <HAL_GetTick>
 800072a:	eba0 0008 	sub.w	r0, r0, r8
 800072e:	42b0      	cmp	r0, r6
 8000730:	d9b6      	bls.n	80006a0 <HAL_RCC_OscConfig+0x1dc>
 8000732:	e709      	b.n	8000548 <HAL_RCC_OscConfig+0x84>
 8000734:	40021000 	.word	0x40021000
 8000738:	42420000 	.word	0x42420000
 800073c:	42420480 	.word	0x42420480
 8000740:	20000008 	.word	0x20000008
 8000744:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000748:	4c22      	ldr	r4, [pc, #136]	; (80007d4 <HAL_RCC_OscConfig+0x310>)
 800074a:	6863      	ldr	r3, [r4, #4]
 800074c:	f003 030c 	and.w	r3, r3, #12
 8000750:	2b08      	cmp	r3, #8
 8000752:	f43f aee2 	beq.w	800051a <HAL_RCC_OscConfig+0x56>
 8000756:	2300      	movs	r3, #0
 8000758:	4e1f      	ldr	r6, [pc, #124]	; (80007d8 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800075a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800075c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800075e:	d12b      	bne.n	80007b8 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000760:	f7ff fd3e 	bl	80001e0 <HAL_GetTick>
 8000764:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000766:	6823      	ldr	r3, [r4, #0]
 8000768:	0199      	lsls	r1, r3, #6
 800076a:	d41f      	bmi.n	80007ac <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800076c:	6a2b      	ldr	r3, [r5, #32]
 800076e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000772:	d105      	bne.n	8000780 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000774:	6862      	ldr	r2, [r4, #4]
 8000776:	68a9      	ldr	r1, [r5, #8]
 8000778:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800077c:	430a      	orrs	r2, r1
 800077e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000780:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000782:	6862      	ldr	r2, [r4, #4]
 8000784:	430b      	orrs	r3, r1
 8000786:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800078a:	4313      	orrs	r3, r2
 800078c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800078e:	2301      	movs	r3, #1
 8000790:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000792:	f7ff fd25 	bl	80001e0 <HAL_GetTick>
 8000796:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000798:	6823      	ldr	r3, [r4, #0]
 800079a:	019a      	lsls	r2, r3, #6
 800079c:	f53f aea7 	bmi.w	80004ee <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80007a0:	f7ff fd1e 	bl	80001e0 <HAL_GetTick>
 80007a4:	1b40      	subs	r0, r0, r5
 80007a6:	2802      	cmp	r0, #2
 80007a8:	d9f6      	bls.n	8000798 <HAL_RCC_OscConfig+0x2d4>
 80007aa:	e6cd      	b.n	8000548 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80007ac:	f7ff fd18 	bl	80001e0 <HAL_GetTick>
 80007b0:	1bc0      	subs	r0, r0, r7
 80007b2:	2802      	cmp	r0, #2
 80007b4:	d9d7      	bls.n	8000766 <HAL_RCC_OscConfig+0x2a2>
 80007b6:	e6c7      	b.n	8000548 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80007b8:	f7ff fd12 	bl	80001e0 <HAL_GetTick>
 80007bc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80007be:	6823      	ldr	r3, [r4, #0]
 80007c0:	019b      	lsls	r3, r3, #6
 80007c2:	f57f ae94 	bpl.w	80004ee <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80007c6:	f7ff fd0b 	bl	80001e0 <HAL_GetTick>
 80007ca:	1b40      	subs	r0, r0, r5
 80007cc:	2802      	cmp	r0, #2
 80007ce:	d9f6      	bls.n	80007be <HAL_RCC_OscConfig+0x2fa>
 80007d0:	e6ba      	b.n	8000548 <HAL_RCC_OscConfig+0x84>
 80007d2:	bf00      	nop
 80007d4:	40021000 	.word	0x40021000
 80007d8:	42420060 	.word	0x42420060

080007dc <HAL_RCC_GetSysClockFreq>:
{
 80007dc:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80007de:	4b19      	ldr	r3, [pc, #100]	; (8000844 <HAL_RCC_GetSysClockFreq+0x68>)
{
 80007e0:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80007e2:	ac02      	add	r4, sp, #8
 80007e4:	f103 0510 	add.w	r5, r3, #16
 80007e8:	4622      	mov	r2, r4
 80007ea:	6818      	ldr	r0, [r3, #0]
 80007ec:	6859      	ldr	r1, [r3, #4]
 80007ee:	3308      	adds	r3, #8
 80007f0:	c203      	stmia	r2!, {r0, r1}
 80007f2:	42ab      	cmp	r3, r5
 80007f4:	4614      	mov	r4, r2
 80007f6:	d1f7      	bne.n	80007e8 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80007f8:	2301      	movs	r3, #1
 80007fa:	f88d 3004 	strb.w	r3, [sp, #4]
 80007fe:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000800:	4911      	ldr	r1, [pc, #68]	; (8000848 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000802:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000806:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000808:	f003 020c 	and.w	r2, r3, #12
 800080c:	2a08      	cmp	r2, #8
 800080e:	d117      	bne.n	8000840 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000810:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000814:	a806      	add	r0, sp, #24
 8000816:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000818:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800081a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800081e:	d50c      	bpl.n	800083a <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000820:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000822:	480a      	ldr	r0, [pc, #40]	; (800084c <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000824:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000828:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800082a:	aa06      	add	r2, sp, #24
 800082c:	4413      	add	r3, r2
 800082e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000832:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000836:	b007      	add	sp, #28
 8000838:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800083a:	4805      	ldr	r0, [pc, #20]	; (8000850 <HAL_RCC_GetSysClockFreq+0x74>)
 800083c:	4350      	muls	r0, r2
 800083e:	e7fa      	b.n	8000836 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000840:	4802      	ldr	r0, [pc, #8]	; (800084c <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000842:	e7f8      	b.n	8000836 <HAL_RCC_GetSysClockFreq+0x5a>
 8000844:	080021a0 	.word	0x080021a0
 8000848:	40021000 	.word	0x40021000
 800084c:	007a1200 	.word	0x007a1200
 8000850:	003d0900 	.word	0x003d0900

08000854 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000854:	4a4d      	ldr	r2, [pc, #308]	; (800098c <HAL_RCC_ClockConfig+0x138>)
{
 8000856:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800085a:	6813      	ldr	r3, [r2, #0]
{
 800085c:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800085e:	f003 0307 	and.w	r3, r3, #7
 8000862:	428b      	cmp	r3, r1
{
 8000864:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000866:	d328      	bcc.n	80008ba <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000868:	682a      	ldr	r2, [r5, #0]
 800086a:	0791      	lsls	r1, r2, #30
 800086c:	d432      	bmi.n	80008d4 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800086e:	07d2      	lsls	r2, r2, #31
 8000870:	d438      	bmi.n	80008e4 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000872:	4a46      	ldr	r2, [pc, #280]	; (800098c <HAL_RCC_ClockConfig+0x138>)
 8000874:	6813      	ldr	r3, [r2, #0]
 8000876:	f003 0307 	and.w	r3, r3, #7
 800087a:	429e      	cmp	r6, r3
 800087c:	d373      	bcc.n	8000966 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800087e:	682a      	ldr	r2, [r5, #0]
 8000880:	4c43      	ldr	r4, [pc, #268]	; (8000990 <HAL_RCC_ClockConfig+0x13c>)
 8000882:	f012 0f04 	tst.w	r2, #4
 8000886:	d179      	bne.n	800097c <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000888:	0713      	lsls	r3, r2, #28
 800088a:	d506      	bpl.n	800089a <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800088c:	6863      	ldr	r3, [r4, #4]
 800088e:	692a      	ldr	r2, [r5, #16]
 8000890:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000894:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000898:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800089a:	f7ff ff9f 	bl	80007dc <HAL_RCC_GetSysClockFreq>
 800089e:	6863      	ldr	r3, [r4, #4]
 80008a0:	4a3c      	ldr	r2, [pc, #240]	; (8000994 <HAL_RCC_ClockConfig+0x140>)
 80008a2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80008a6:	5cd3      	ldrb	r3, [r2, r3]
 80008a8:	40d8      	lsrs	r0, r3
 80008aa:	4b3b      	ldr	r3, [pc, #236]	; (8000998 <HAL_RCC_ClockConfig+0x144>)
 80008ac:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80008ae:	2000      	movs	r0, #0
 80008b0:	f7ff fc54 	bl	800015c <HAL_InitTick>
  return HAL_OK;
 80008b4:	2000      	movs	r0, #0
}
 80008b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80008ba:	6813      	ldr	r3, [r2, #0]
 80008bc:	f023 0307 	bic.w	r3, r3, #7
 80008c0:	430b      	orrs	r3, r1
 80008c2:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80008c4:	6813      	ldr	r3, [r2, #0]
 80008c6:	f003 0307 	and.w	r3, r3, #7
 80008ca:	4299      	cmp	r1, r3
 80008cc:	d0cc      	beq.n	8000868 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80008ce:	2001      	movs	r0, #1
 80008d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80008d4:	492e      	ldr	r1, [pc, #184]	; (8000990 <HAL_RCC_ClockConfig+0x13c>)
 80008d6:	68a8      	ldr	r0, [r5, #8]
 80008d8:	684b      	ldr	r3, [r1, #4]
 80008da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80008de:	4303      	orrs	r3, r0
 80008e0:	604b      	str	r3, [r1, #4]
 80008e2:	e7c4      	b.n	800086e <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008e4:	686a      	ldr	r2, [r5, #4]
 80008e6:	4c2a      	ldr	r4, [pc, #168]	; (8000990 <HAL_RCC_ClockConfig+0x13c>)
 80008e8:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008ea:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008ec:	d11c      	bne.n	8000928 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008ee:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008f2:	d0ec      	beq.n	80008ce <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80008f4:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008f6:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80008fa:	f023 0303 	bic.w	r3, r3, #3
 80008fe:	4313      	orrs	r3, r2
 8000900:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8000902:	f7ff fc6d 	bl	80001e0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000906:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000908:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800090a:	2b01      	cmp	r3, #1
 800090c:	d114      	bne.n	8000938 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800090e:	6863      	ldr	r3, [r4, #4]
 8000910:	f003 030c 	and.w	r3, r3, #12
 8000914:	2b04      	cmp	r3, #4
 8000916:	d0ac      	beq.n	8000872 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000918:	f7ff fc62 	bl	80001e0 <HAL_GetTick>
 800091c:	1bc0      	subs	r0, r0, r7
 800091e:	4540      	cmp	r0, r8
 8000920:	d9f5      	bls.n	800090e <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 8000922:	2003      	movs	r0, #3
 8000924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000928:	2a02      	cmp	r2, #2
 800092a:	d102      	bne.n	8000932 <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800092c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000930:	e7df      	b.n	80008f2 <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000932:	f013 0f02 	tst.w	r3, #2
 8000936:	e7dc      	b.n	80008f2 <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000938:	2b02      	cmp	r3, #2
 800093a:	d10f      	bne.n	800095c <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800093c:	6863      	ldr	r3, [r4, #4]
 800093e:	f003 030c 	and.w	r3, r3, #12
 8000942:	2b08      	cmp	r3, #8
 8000944:	d095      	beq.n	8000872 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000946:	f7ff fc4b 	bl	80001e0 <HAL_GetTick>
 800094a:	1bc0      	subs	r0, r0, r7
 800094c:	4540      	cmp	r0, r8
 800094e:	d9f5      	bls.n	800093c <HAL_RCC_ClockConfig+0xe8>
 8000950:	e7e7      	b.n	8000922 <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000952:	f7ff fc45 	bl	80001e0 <HAL_GetTick>
 8000956:	1bc0      	subs	r0, r0, r7
 8000958:	4540      	cmp	r0, r8
 800095a:	d8e2      	bhi.n	8000922 <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800095c:	6863      	ldr	r3, [r4, #4]
 800095e:	f013 0f0c 	tst.w	r3, #12
 8000962:	d1f6      	bne.n	8000952 <HAL_RCC_ClockConfig+0xfe>
 8000964:	e785      	b.n	8000872 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000966:	6813      	ldr	r3, [r2, #0]
 8000968:	f023 0307 	bic.w	r3, r3, #7
 800096c:	4333      	orrs	r3, r6
 800096e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000970:	6813      	ldr	r3, [r2, #0]
 8000972:	f003 0307 	and.w	r3, r3, #7
 8000976:	429e      	cmp	r6, r3
 8000978:	d1a9      	bne.n	80008ce <HAL_RCC_ClockConfig+0x7a>
 800097a:	e780      	b.n	800087e <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800097c:	6863      	ldr	r3, [r4, #4]
 800097e:	68e9      	ldr	r1, [r5, #12]
 8000980:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000984:	430b      	orrs	r3, r1
 8000986:	6063      	str	r3, [r4, #4]
 8000988:	e77e      	b.n	8000888 <HAL_RCC_ClockConfig+0x34>
 800098a:	bf00      	nop
 800098c:	40022000 	.word	0x40022000
 8000990:	40021000 	.word	0x40021000
 8000994:	08002412 	.word	0x08002412
 8000998:	20000008 	.word	0x20000008

0800099c <HAL_RCC_GetHCLKFreq>:
}
 800099c:	4b01      	ldr	r3, [pc, #4]	; (80009a4 <HAL_RCC_GetHCLKFreq+0x8>)
 800099e:	6818      	ldr	r0, [r3, #0]
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	20000008 	.word	0x20000008

080009a8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80009a8:	4b04      	ldr	r3, [pc, #16]	; (80009bc <HAL_RCC_GetPCLK1Freq+0x14>)
 80009aa:	4a05      	ldr	r2, [pc, #20]	; (80009c0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80009ac:	685b      	ldr	r3, [r3, #4]
 80009ae:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80009b2:	5cd3      	ldrb	r3, [r2, r3]
 80009b4:	4a03      	ldr	r2, [pc, #12]	; (80009c4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80009b6:	6810      	ldr	r0, [r2, #0]
}    
 80009b8:	40d8      	lsrs	r0, r3
 80009ba:	4770      	bx	lr
 80009bc:	40021000 	.word	0x40021000
 80009c0:	08002422 	.word	0x08002422
 80009c4:	20000008 	.word	0x20000008

080009c8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80009c8:	4b04      	ldr	r3, [pc, #16]	; (80009dc <HAL_RCC_GetPCLK2Freq+0x14>)
 80009ca:	4a05      	ldr	r2, [pc, #20]	; (80009e0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80009d2:	5cd3      	ldrb	r3, [r2, r3]
 80009d4:	4a03      	ldr	r2, [pc, #12]	; (80009e4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80009d6:	6810      	ldr	r0, [r2, #0]
} 
 80009d8:	40d8      	lsrs	r0, r3
 80009da:	4770      	bx	lr
 80009dc:	40021000 	.word	0x40021000
 80009e0:	08002422 	.word	0x08002422
 80009e4:	20000008 	.word	0x20000008

080009e8 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80009e8:	6a03      	ldr	r3, [r0, #32]
{
 80009ea:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80009ec:	f023 0301 	bic.w	r3, r3, #1
 80009f0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80009f2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80009f4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80009f6:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80009f8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80009fa:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80009fe:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8000a00:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8000a02:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8000a06:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8000a08:	4d0a      	ldr	r5, [pc, #40]	; (8000a34 <TIM_OC1_SetConfig+0x4c>)
 8000a0a:	42a8      	cmp	r0, r5
 8000a0c:	d10b      	bne.n	8000a26 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8000a0e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8000a10:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8000a14:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8000a16:	698e      	ldr	r6, [r1, #24]
 8000a18:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8000a1a:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8000a1e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8000a20:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8000a24:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000a26:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000a28:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8000a2a:	684a      	ldr	r2, [r1, #4]
 8000a2c:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000a2e:	6203      	str	r3, [r0, #32]
 8000a30:	bd70      	pop	{r4, r5, r6, pc}
 8000a32:	bf00      	nop
 8000a34:	40012c00 	.word	0x40012c00

08000a38 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000a38:	6a03      	ldr	r3, [r0, #32]
{
 8000a3a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000a3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000a40:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000a42:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000a44:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000a46:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000a48:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8000a4a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000a4e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000a50:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8000a52:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000a56:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8000a5a:	4d0b      	ldr	r5, [pc, #44]	; (8000a88 <TIM_OC3_SetConfig+0x50>)
 8000a5c:	42a8      	cmp	r0, r5
 8000a5e:	d10d      	bne.n	8000a7c <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000a60:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8000a62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000a66:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000a6a:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8000a6c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8000a6e:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000a72:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8000a74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000a78:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000a7c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000a7e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8000a80:	684a      	ldr	r2, [r1, #4]
 8000a82:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000a84:	6203      	str	r3, [r0, #32]
 8000a86:	bd70      	pop	{r4, r5, r6, pc}
 8000a88:	40012c00 	.word	0x40012c00

08000a8c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000a8c:	6a03      	ldr	r3, [r0, #32]
{
 8000a8e:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000a90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000a94:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000a96:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000a98:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000a9a:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000a9c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8000a9e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000aa2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000aa6:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8000aa8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000aac:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8000ab0:	4d06      	ldr	r5, [pc, #24]	; (8000acc <TIM_OC4_SetConfig+0x40>)
 8000ab2:	42a8      	cmp	r0, r5
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8000ab4:	bf02      	ittt	eq
 8000ab6:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8000ab8:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8000abc:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000ac0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000ac2:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8000ac4:	684a      	ldr	r2, [r1, #4]
 8000ac6:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000ac8:	6203      	str	r3, [r0, #32]
 8000aca:	bd30      	pop	{r4, r5, pc}
 8000acc:	40012c00 	.word	0x40012c00

08000ad0 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000ad0:	4a1a      	ldr	r2, [pc, #104]	; (8000b3c <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8000ad2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000ad4:	4290      	cmp	r0, r2
 8000ad6:	d00a      	beq.n	8000aee <TIM_Base_SetConfig+0x1e>
 8000ad8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000adc:	d007      	beq.n	8000aee <TIM_Base_SetConfig+0x1e>
 8000ade:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000ae2:	4290      	cmp	r0, r2
 8000ae4:	d003      	beq.n	8000aee <TIM_Base_SetConfig+0x1e>
 8000ae6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000aea:	4290      	cmp	r0, r2
 8000aec:	d115      	bne.n	8000b1a <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8000aee:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000af0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000af4:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000af6:	4a11      	ldr	r2, [pc, #68]	; (8000b3c <TIM_Base_SetConfig+0x6c>)
 8000af8:	4290      	cmp	r0, r2
 8000afa:	d00a      	beq.n	8000b12 <TIM_Base_SetConfig+0x42>
 8000afc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000b00:	d007      	beq.n	8000b12 <TIM_Base_SetConfig+0x42>
 8000b02:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000b06:	4290      	cmp	r0, r2
 8000b08:	d003      	beq.n	8000b12 <TIM_Base_SetConfig+0x42>
 8000b0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000b0e:	4290      	cmp	r0, r2
 8000b10:	d103      	bne.n	8000b1a <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000b12:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000b14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000b18:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8000b1a:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8000b1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8000b20:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8000b22:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000b24:	688b      	ldr	r3, [r1, #8]
 8000b26:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000b28:	680b      	ldr	r3, [r1, #0]
 8000b2a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000b2c:	4b03      	ldr	r3, [pc, #12]	; (8000b3c <TIM_Base_SetConfig+0x6c>)
 8000b2e:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8000b30:	bf04      	itt	eq
 8000b32:	690b      	ldreq	r3, [r1, #16]
 8000b34:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8000b36:	2301      	movs	r3, #1
 8000b38:	6143      	str	r3, [r0, #20]
 8000b3a:	4770      	bx	lr
 8000b3c:	40012c00 	.word	0x40012c00

08000b40 <HAL_TIM_PWM_Init>:
{
 8000b40:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000b42:	4604      	mov	r4, r0
 8000b44:	b1a0      	cbz	r0, 8000b70 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000b46:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000b4a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000b4e:	b91b      	cbnz	r3, 8000b58 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000b50:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8000b54:	f000 fd78 	bl	8001648 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000b58:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000b5a:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8000b5c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000b60:	1d21      	adds	r1, r4, #4
 8000b62:	f7ff ffb5 	bl	8000ad0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000b66:	2301      	movs	r3, #1
  return HAL_OK;
 8000b68:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8000b6a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8000b6e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000b70:	2001      	movs	r0, #1
}
 8000b72:	bd10      	pop	{r4, pc}

08000b74 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000b74:	6a03      	ldr	r3, [r0, #32]
{
 8000b76:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000b78:	f023 0310 	bic.w	r3, r3, #16
 8000b7c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8000b7e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8000b80:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8000b82:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000b84:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8000b86:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000b8a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8000b8e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8000b90:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8000b94:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8000b98:	4d0b      	ldr	r5, [pc, #44]	; (8000bc8 <TIM_OC2_SetConfig+0x54>)
 8000b9a:	42a8      	cmp	r0, r5
 8000b9c:	d10d      	bne.n	8000bba <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8000b9e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8000ba0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8000ba4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8000ba8:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8000baa:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8000bac:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8000bb0:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8000bb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8000bb6:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8000bba:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8000bbc:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8000bbe:	684a      	ldr	r2, [r1, #4]
 8000bc0:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8000bc2:	6203      	str	r3, [r0, #32]
 8000bc4:	bd70      	pop	{r4, r5, r6, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40012c00 	.word	0x40012c00

08000bcc <HAL_TIM_PWM_ConfigChannel>:
{
 8000bcc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8000bce:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8000bd2:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	f04f 0002 	mov.w	r0, #2
 8000bda:	d025      	beq.n	8000c28 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8000bdc:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8000bde:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8000be2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8000be6:	2a0c      	cmp	r2, #12
 8000be8:	d818      	bhi.n	8000c1c <HAL_TIM_PWM_ConfigChannel+0x50>
 8000bea:	e8df f002 	tbb	[pc, r2]
 8000bee:	1707      	.short	0x1707
 8000bf0:	171e1717 	.word	0x171e1717
 8000bf4:	172f1717 	.word	0x172f1717
 8000bf8:	1717      	.short	0x1717
 8000bfa:	40          	.byte	0x40
 8000bfb:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8000bfc:	6820      	ldr	r0, [r4, #0]
 8000bfe:	f7ff fef3 	bl	80009e8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8000c02:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8000c04:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8000c06:	699a      	ldr	r2, [r3, #24]
 8000c08:	f042 0208 	orr.w	r2, r2, #8
 8000c0c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8000c0e:	699a      	ldr	r2, [r3, #24]
 8000c10:	f022 0204 	bic.w	r2, r2, #4
 8000c14:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8000c16:	699a      	ldr	r2, [r3, #24]
 8000c18:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8000c1a:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8000c1c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8000c1e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8000c20:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8000c24:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8000c28:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8000c2a:	6820      	ldr	r0, [r4, #0]
 8000c2c:	f7ff ffa2 	bl	8000b74 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8000c30:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8000c32:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8000c34:	699a      	ldr	r2, [r3, #24]
 8000c36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000c3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8000c3c:	699a      	ldr	r2, [r3, #24]
 8000c3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000c42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8000c44:	699a      	ldr	r2, [r3, #24]
 8000c46:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000c4a:	e7e6      	b.n	8000c1a <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8000c4c:	6820      	ldr	r0, [r4, #0]
 8000c4e:	f7ff fef3 	bl	8000a38 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8000c52:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8000c54:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8000c56:	69da      	ldr	r2, [r3, #28]
 8000c58:	f042 0208 	orr.w	r2, r2, #8
 8000c5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8000c5e:	69da      	ldr	r2, [r3, #28]
 8000c60:	f022 0204 	bic.w	r2, r2, #4
 8000c64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8000c66:	69da      	ldr	r2, [r3, #28]
 8000c68:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8000c6a:	61da      	str	r2, [r3, #28]
    break;
 8000c6c:	e7d6      	b.n	8000c1c <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8000c6e:	6820      	ldr	r0, [r4, #0]
 8000c70:	f7ff ff0c 	bl	8000a8c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8000c74:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8000c76:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8000c78:	69da      	ldr	r2, [r3, #28]
 8000c7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000c7e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8000c80:	69da      	ldr	r2, [r3, #28]
 8000c82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000c86:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8000c88:	69da      	ldr	r2, [r3, #28]
 8000c8a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000c8e:	e7ec      	b.n	8000c6a <HAL_TIM_PWM_ConfigChannel+0x9e>

08000c90 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8000c90:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8000c92:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8000c94:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 8000c96:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8000c98:	ea23 0304 	bic.w	r3, r3, r4
 8000c9c:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8000c9e:	6a03      	ldr	r3, [r0, #32]
 8000ca0:	408a      	lsls	r2, r1
 8000ca2:	431a      	orrs	r2, r3
 8000ca4:	6202      	str	r2, [r0, #32]
 8000ca6:	bd10      	pop	{r4, pc}

08000ca8 <HAL_TIM_PWM_Start>:
{
 8000ca8:	b510      	push	{r4, lr}
 8000caa:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8000cac:	2201      	movs	r2, #1
 8000cae:	6800      	ldr	r0, [r0, #0]
 8000cb0:	f7ff ffee 	bl	8000c90 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8000cb4:	6823      	ldr	r3, [r4, #0]
 8000cb6:	4a06      	ldr	r2, [pc, #24]	; (8000cd0 <HAL_TIM_PWM_Start+0x28>)
}
 8000cb8:	2000      	movs	r0, #0
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8000cba:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 8000cbc:	bf02      	ittt	eq
 8000cbe:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8000cc0:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8000cc4:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	f042 0201 	orr.w	r2, r2, #1
 8000ccc:	601a      	str	r2, [r3, #0]
}
 8000cce:	bd10      	pop	{r4, pc}
 8000cd0:	40012c00 	.word	0x40012c00

08000cd4 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8000cd4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8000cd8:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	f04f 0302 	mov.w	r3, #2
 8000ce0:	d018      	beq.n	8000d14 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8000ce2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000ce6:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8000ce8:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000cea:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8000cec:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000cee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000cf2:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8000cf4:	685a      	ldr	r2, [r3, #4]
 8000cf6:	4322      	orrs	r2, r4
 8000cf8:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8000cfa:	689a      	ldr	r2, [r3, #8]
 8000cfc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d00:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8000d02:	689a      	ldr	r2, [r3, #8]
 8000d04:	430a      	orrs	r2, r1
 8000d06:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8000d0e:	2300      	movs	r3, #0
 8000d10:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8000d14:	4618      	mov	r0, r3

  return HAL_OK;
}
 8000d16:	bd10      	pop	{r4, pc}

08000d18 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000d1c:	6805      	ldr	r5, [r0, #0]
 8000d1e:	68c2      	ldr	r2, [r0, #12]
 8000d20:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000d22:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000d24:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000d2c:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8000d2e:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000d30:	430b      	orrs	r3, r1
 8000d32:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8000d34:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8000d38:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000d3c:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000d42:	696b      	ldr	r3, [r5, #20]
 8000d44:	6982      	ldr	r2, [r0, #24]
 8000d46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8000d4e:	4b40      	ldr	r3, [pc, #256]	; (8000e50 <UART_SetConfig+0x138>)
{
 8000d50:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8000d52:	429d      	cmp	r5, r3
 8000d54:	f04f 0419 	mov.w	r4, #25
 8000d58:	d146      	bne.n	8000de8 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000d5a:	f7ff fe35 	bl	80009c8 <HAL_RCC_GetPCLK2Freq>
 8000d5e:	fb04 f300 	mul.w	r3, r4, r0
 8000d62:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000d66:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000d6a:	00b6      	lsls	r6, r6, #2
 8000d6c:	fbb3 f3f6 	udiv	r3, r3, r6
 8000d70:	fbb3 f3f8 	udiv	r3, r3, r8
 8000d74:	011e      	lsls	r6, r3, #4
 8000d76:	f7ff fe27 	bl	80009c8 <HAL_RCC_GetPCLK2Freq>
 8000d7a:	4360      	muls	r0, r4
 8000d7c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	fbb0 f7f3 	udiv	r7, r0, r3
 8000d86:	f7ff fe1f 	bl	80009c8 <HAL_RCC_GetPCLK2Freq>
 8000d8a:	4360      	muls	r0, r4
 8000d8c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d96:	fbb3 f3f8 	udiv	r3, r3, r8
 8000d9a:	fb08 7313 	mls	r3, r8, r3, r7
 8000d9e:	011b      	lsls	r3, r3, #4
 8000da0:	3332      	adds	r3, #50	; 0x32
 8000da2:	fbb3 f3f8 	udiv	r3, r3, r8
 8000da6:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000daa:	f7ff fe0d 	bl	80009c8 <HAL_RCC_GetPCLK2Freq>
 8000dae:	4360      	muls	r0, r4
 8000db0:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000db4:	0092      	lsls	r2, r2, #2
 8000db6:	fbb0 faf2 	udiv	sl, r0, r2
 8000dba:	f7ff fe05 	bl	80009c8 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000dbe:	4360      	muls	r0, r4
 8000dc0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8000dca:	fbb3 f3f8 	udiv	r3, r3, r8
 8000dce:	fb08 a313 	mls	r3, r8, r3, sl
 8000dd2:	011b      	lsls	r3, r3, #4
 8000dd4:	3332      	adds	r3, #50	; 0x32
 8000dd6:	fbb3 f3f8 	udiv	r3, r3, r8
 8000dda:	f003 030f 	and.w	r3, r3, #15
 8000dde:	433b      	orrs	r3, r7
 8000de0:	4433      	add	r3, r6
 8000de2:	60ab      	str	r3, [r5, #8]
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f7ff fdde 	bl	80009a8 <HAL_RCC_GetPCLK1Freq>
 8000dec:	fb04 f300 	mul.w	r3, r4, r0
 8000df0:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000df4:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000df8:	00b6      	lsls	r6, r6, #2
 8000dfa:	fbb3 f3f6 	udiv	r3, r3, r6
 8000dfe:	fbb3 f3f8 	udiv	r3, r3, r8
 8000e02:	011e      	lsls	r6, r3, #4
 8000e04:	f7ff fdd0 	bl	80009a8 <HAL_RCC_GetPCLK1Freq>
 8000e08:	4360      	muls	r0, r4
 8000e0a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	fbb0 f7f3 	udiv	r7, r0, r3
 8000e14:	f7ff fdc8 	bl	80009a8 <HAL_RCC_GetPCLK1Freq>
 8000e18:	4360      	muls	r0, r4
 8000e1a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e24:	fbb3 f3f8 	udiv	r3, r3, r8
 8000e28:	fb08 7313 	mls	r3, r8, r3, r7
 8000e2c:	011b      	lsls	r3, r3, #4
 8000e2e:	3332      	adds	r3, #50	; 0x32
 8000e30:	fbb3 f3f8 	udiv	r3, r3, r8
 8000e34:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000e38:	f7ff fdb6 	bl	80009a8 <HAL_RCC_GetPCLK1Freq>
 8000e3c:	4360      	muls	r0, r4
 8000e3e:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000e42:	0092      	lsls	r2, r2, #2
 8000e44:	fbb0 faf2 	udiv	sl, r0, r2
 8000e48:	f7ff fdae 	bl	80009a8 <HAL_RCC_GetPCLK1Freq>
 8000e4c:	e7b7      	b.n	8000dbe <UART_SetConfig+0xa6>
 8000e4e:	bf00      	nop
 8000e50:	40013800 	.word	0x40013800

08000e54 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8000e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e56:	4604      	mov	r4, r0
 8000e58:	460e      	mov	r6, r1
 8000e5a:	4617      	mov	r7, r2
 8000e5c:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8000e5e:	6821      	ldr	r1, [r4, #0]
 8000e60:	680b      	ldr	r3, [r1, #0]
 8000e62:	ea36 0303 	bics.w	r3, r6, r3
 8000e66:	d101      	bne.n	8000e6c <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8000e68:	2000      	movs	r0, #0
}
 8000e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000e6c:	1c6b      	adds	r3, r5, #1
 8000e6e:	d0f7      	beq.n	8000e60 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000e70:	b995      	cbnz	r5, 8000e98 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000e72:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8000e74:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000e76:	68da      	ldr	r2, [r3, #12]
 8000e78:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8000e7c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000e7e:	695a      	ldr	r2, [r3, #20]
 8000e80:	f022 0201 	bic.w	r2, r2, #1
 8000e84:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8000e86:	2320      	movs	r3, #32
 8000e88:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8000e8c:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8000e90:	2300      	movs	r3, #0
 8000e92:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8000e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000e98:	f7ff f9a2 	bl	80001e0 <HAL_GetTick>
 8000e9c:	1bc0      	subs	r0, r0, r7
 8000e9e:	4285      	cmp	r5, r0
 8000ea0:	d2dd      	bcs.n	8000e5e <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8000ea2:	e7e6      	b.n	8000e72 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08000ea4 <HAL_UART_Init>:
{
 8000ea4:	b510      	push	{r4, lr}
  if(huart == NULL)
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	b340      	cbz	r0, 8000efc <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8000eaa:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000eae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000eb2:	b91b      	cbnz	r3, 8000ebc <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8000eb4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8000eb8:	f000 fc46 	bl	8001748 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8000ebc:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8000ebe:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000ec0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8000ec4:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8000ec6:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8000ec8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000ecc:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8000ece:	f7ff ff23 	bl	8000d18 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000ed2:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000ed4:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000ed6:	691a      	ldr	r2, [r3, #16]
 8000ed8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000edc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000ede:	695a      	ldr	r2, [r3, #20]
 8000ee0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000ee4:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8000ee6:	68da      	ldr	r2, [r3, #12]
 8000ee8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000eec:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8000eee:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000ef0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8000ef2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8000ef6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8000efa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000efc:	2001      	movs	r0, #1
}
 8000efe:	bd10      	pop	{r4, pc}

08000f00 <HAL_UART_Transmit>:
{
 8000f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f04:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8000f06:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8000f0a:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 8000f0c:	2b20      	cmp	r3, #32
{
 8000f0e:	460d      	mov	r5, r1
 8000f10:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8000f12:	d14e      	bne.n	8000fb2 <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 8000f14:	2900      	cmp	r1, #0
 8000f16:	d049      	beq.n	8000fac <HAL_UART_Transmit+0xac>
 8000f18:	2a00      	cmp	r2, #0
 8000f1a:	d047      	beq.n	8000fac <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8000f1c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d046      	beq.n	8000fb2 <HAL_UART_Transmit+0xb2>
 8000f24:	2301      	movs	r3, #1
 8000f26:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000f2e:	2321      	movs	r3, #33	; 0x21
 8000f30:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8000f34:	f7ff f954 	bl	80001e0 <HAL_GetTick>
 8000f38:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8000f3a:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8000f3e:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8000f42:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8000f44:	b29b      	uxth	r3, r3
 8000f46:	b96b      	cbnz	r3, 8000f64 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000f48:	463b      	mov	r3, r7
 8000f4a:	4632      	mov	r2, r6
 8000f4c:	2140      	movs	r1, #64	; 0x40
 8000f4e:	4620      	mov	r0, r4
 8000f50:	f7ff ff80 	bl	8000e54 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000f54:	b9a8      	cbnz	r0, 8000f82 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8000f56:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8000f58:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8000f5c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8000f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8000f64:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000f66:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8000f68:	3b01      	subs	r3, #1
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000f6e:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000f70:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000f72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000f76:	4620      	mov	r0, r4
 8000f78:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000f7a:	d10e      	bne.n	8000f9a <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000f7c:	f7ff ff6a 	bl	8000e54 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000f80:	b110      	cbz	r0, 8000f88 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8000f82:	2003      	movs	r0, #3
 8000f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8000f88:	882b      	ldrh	r3, [r5, #0]
 8000f8a:	6822      	ldr	r2, [r4, #0]
 8000f8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000f90:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8000f92:	6923      	ldr	r3, [r4, #16]
 8000f94:	b943      	cbnz	r3, 8000fa8 <HAL_UART_Transmit+0xa8>
          pData +=2U;
 8000f96:	3502      	adds	r5, #2
 8000f98:	e7d3      	b.n	8000f42 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000f9a:	f7ff ff5b 	bl	8000e54 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000f9e:	2800      	cmp	r0, #0
 8000fa0:	d1ef      	bne.n	8000f82 <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8000fa2:	6823      	ldr	r3, [r4, #0]
 8000fa4:	782a      	ldrb	r2, [r5, #0]
 8000fa6:	605a      	str	r2, [r3, #4]
 8000fa8:	3501      	adds	r5, #1
 8000faa:	e7ca      	b.n	8000f42 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8000fac:	2001      	movs	r0, #1
 8000fae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8000fb2:	2002      	movs	r0, #2
}
 8000fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000fb8 <StartTimers>:

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void StartTimers(void)
{
 8000fb8:	b510      	push	{r4, lr}
	// pinouts for PCB revision 1.0 build:160219)
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1 );
 8000fba:	4c16      	ldr	r4, [pc, #88]	; (8001014 <StartTimers+0x5c>)
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4620      	mov	r0, r4
 8000fc0:	f7ff fe72 	bl	8000ca8 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000fc4:	2104      	movs	r1, #4
 8000fc6:	4620      	mov	r0, r4
 8000fc8:	f7ff fe6e 	bl	8000ca8 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000fcc:	2108      	movs	r1, #8
 8000fce:	4620      	mov	r0, r4
 8000fd0:	f7ff fe6a 	bl	8000ca8 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000fd4:	4620      	mov	r0, r4
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1 );
 8000fd6:	4c10      	ldr	r4, [pc, #64]	; (8001018 <StartTimers+0x60>)
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000fd8:	210c      	movs	r1, #12
 8000fda:	f7ff fe65 	bl	8000ca8 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1 );
 8000fde:	2100      	movs	r1, #0
 8000fe0:	4620      	mov	r0, r4
 8000fe2:	f7ff fe61 	bl	8000ca8 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000fe6:	2104      	movs	r1, #4
 8000fe8:	4620      	mov	r0, r4
 8000fea:	f7ff fe5d 	bl	8000ca8 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000fee:	2108      	movs	r1, #8
 8000ff0:	4620      	mov	r0, r4
 8000ff2:	f7ff fe59 	bl	8000ca8 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000ff6:	4620      	mov	r0, r4
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000ff8:	4c08      	ldr	r4, [pc, #32]	; (800101c <StartTimers+0x64>)
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000ffa:	210c      	movs	r1, #12
 8000ffc:	f7ff fe54 	bl	8000ca8 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001000:	2100      	movs	r1, #0
 8001002:	4620      	mov	r0, r4
 8001004:	f7ff fe50 	bl	8000ca8 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001008:	4620      	mov	r0, r4
}
 800100a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800100e:	2104      	movs	r1, #4
 8001010:	f7ff be4a 	b.w	8000ca8 <HAL_TIM_PWM_Start>
 8001014:	200001d8 	.word	0x200001d8
 8001018:	20000154 	.word	0x20000154
 800101c:	20000108 	.word	0x20000108

08001020 <setPwmChannel>:

//const uint16_t PWM_CHANNELS[10] = {TIM2->CCR4,TIM2->CCR3,TIM3->CCR4,TIM3->CCR3,TIM3->CCR2,TIM3->CCR1,TIM4->CCR1,TIM4->CCR2,TIM2->CCR1,TIM2->CCR2};
void setPwmChannel(uint8_t channel, uint8_t data) {
	switch (channel) {
 8001020:	2809      	cmp	r0, #9
 8001022:	d814      	bhi.n	800104e <setPwmChannel+0x2e>
 8001024:	e8df f000 	tbb	[pc, r0]
 8001028:	0f0d0905 	.word	0x0f0d0905
 800102c:	19171411 	.word	0x19171411
 8001030:	1e1b      	.short	0x1e1b
	data = data*4;
	case 0: TIM2->CCR4 = data; break;
 8001032:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	case 1: TIM2->CCR3 = data; break;
	case 2: TIM3->CCR4 = data; break;
 8001036:	6419      	str	r1, [r3, #64]	; 0x40
 8001038:	4770      	bx	lr
	case 1: TIM2->CCR3 = data; break;
 800103a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	case 3: TIM3->CCR3 = data; break;
 800103e:	63d9      	str	r1, [r3, #60]	; 0x3c
 8001040:	4770      	bx	lr
	case 2: TIM3->CCR4 = data; break;
 8001042:	4b0a      	ldr	r3, [pc, #40]	; (800106c <setPwmChannel+0x4c>)
 8001044:	e7f7      	b.n	8001036 <setPwmChannel+0x16>
	case 3: TIM3->CCR3 = data; break;
 8001046:	4b09      	ldr	r3, [pc, #36]	; (800106c <setPwmChannel+0x4c>)
 8001048:	e7f9      	b.n	800103e <setPwmChannel+0x1e>
	case 4: TIM3->CCR2 = data; break;
 800104a:	4b08      	ldr	r3, [pc, #32]	; (800106c <setPwmChannel+0x4c>)
	case 5: TIM3->CCR1 = data; break;
	case 6: TIM4->CCR1 = data; break;
	case 7: TIM4->CCR2 = data; break;
	case 8: TIM2->CCR1 = data; break;
	case 9: TIM2->CCR2 = data; break;
 800104c:	6399      	str	r1, [r3, #56]	; 0x38
 800104e:	4770      	bx	lr
	case 5: TIM3->CCR1 = data; break;
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <setPwmChannel+0x4c>)
	case 8: TIM2->CCR1 = data; break;
 8001052:	6359      	str	r1, [r3, #52]	; 0x34
 8001054:	4770      	bx	lr
	case 6: TIM4->CCR1 = data; break;
 8001056:	4b06      	ldr	r3, [pc, #24]	; (8001070 <setPwmChannel+0x50>)
 8001058:	e7fb      	b.n	8001052 <setPwmChannel+0x32>
	case 7: TIM4->CCR2 = data; break;
 800105a:	4b05      	ldr	r3, [pc, #20]	; (8001070 <setPwmChannel+0x50>)
 800105c:	e7f6      	b.n	800104c <setPwmChannel+0x2c>
	case 8: TIM2->CCR1 = data; break;
 800105e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001062:	e7f6      	b.n	8001052 <setPwmChannel+0x32>
	case 9: TIM2->CCR2 = data; break;
 8001064:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001068:	e7f0      	b.n	800104c <setPwmChannel+0x2c>
 800106a:	bf00      	nop
 800106c:	40000400 	.word	0x40000400
 8001070:	40000800 	.word	0x40000800

08001074 <hexToInt>:
	TIM4->CCR2 = pwmChannel[7];
	TIM2->CCR1 = pwmChannel[8];
	TIM2->CCR2 = pwmChannel[9];
}

uint32_t hexToInt(char* hex) {
 8001074:	1e41      	subs	r1, r0, #1
	uint32_t val = 0;
 8001076:	2000      	movs	r0, #0
    while (*hex) {
 8001078:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800107c:	b903      	cbnz	r3, 8001080 <hexToInt+0xc>
        else if (byte >= 'a' && byte <='f') byte = byte - 'a' + 10;
        else if (byte >= 'A' && byte <='F') byte = byte - 'A' + 10;
        val = (val << 4) | (byte & 0xF);
    }
    return val;
}
 800107e:	4770      	bx	lr
        if (byte >= '0' && byte <= '9') byte = byte - '0';
 8001080:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001084:	b2d2      	uxtb	r2, r2
 8001086:	2a09      	cmp	r2, #9
 8001088:	d905      	bls.n	8001096 <hexToInt+0x22>
        else if (byte >= 'a' && byte <='f') byte = byte - 'a' + 10;
 800108a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800108e:	2a05      	cmp	r2, #5
 8001090:	d806      	bhi.n	80010a0 <hexToInt+0x2c>
 8001092:	3b57      	subs	r3, #87	; 0x57
        else if (byte >= 'A' && byte <='F') byte = byte - 'A' + 10;
 8001094:	b2da      	uxtb	r2, r3
        val = (val << 4) | (byte & 0xF);
 8001096:	f002 030f 	and.w	r3, r2, #15
 800109a:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 800109e:	e7eb      	b.n	8001078 <hexToInt+0x4>
        else if (byte >= 'A' && byte <='F') byte = byte - 'A' + 10;
 80010a0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80010a4:	2a05      	cmp	r2, #5
 80010a6:	d801      	bhi.n	80010ac <hexToInt+0x38>
 80010a8:	3b37      	subs	r3, #55	; 0x37
 80010aa:	e7f3      	b.n	8001094 <hexToInt+0x20>
 80010ac:	461a      	mov	r2, r3
 80010ae:	e7f2      	b.n	8001096 <hexToInt+0x22>

080010b0 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
{
 80010b4:	b510      	push	{r4, lr}
 80010b6:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010b8:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010ba:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010bc:	2100      	movs	r1, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010be:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010c0:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010c2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c6:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010c8:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010ca:	9108      	str	r1, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010cc:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ce:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010d0:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d2:	f7ff f9f7 	bl	80004c4 <HAL_RCC_OscConfig>
 80010d6:	b100      	cbz	r0, 80010da <SystemClock_Config+0x2a>
 80010d8:	e7fe      	b.n	80010d8 <SystemClock_Config+0x28>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010da:	230f      	movs	r3, #15
 80010dc:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010e2:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80010e4:	f44f 63a0 	mov.w	r3, #1280	; 0x500
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010e8:	9003      	str	r0, [sp, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010ea:	4621      	mov	r1, r4
 80010ec:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ee:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80010f0:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010f2:	f7ff fbaf 	bl	8000854 <HAL_RCC_ClockConfig>
 80010f6:	4604      	mov	r4, r0
 80010f8:	b100      	cbz	r0, 80010fc <SystemClock_Config+0x4c>
 80010fa:	e7fe      	b.n	80010fa <SystemClock_Config+0x4a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80010fc:	f7ff fc4e 	bl	800099c <HAL_RCC_GetHCLKFreq>
 8001100:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001104:	fbb0 f0f3 	udiv	r0, r0, r3
 8001108:	f7ff f8d4 	bl	80002b4 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800110c:	2004      	movs	r0, #4
 800110e:	f7ff f8e7 	bl	80002e0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001112:	4622      	mov	r2, r4
 8001114:	4621      	mov	r1, r4
 8001116:	f04f 30ff 	mov.w	r0, #4294967295
 800111a:	f7ff f88b 	bl	8000234 <HAL_NVIC_SetPriority>
}
 800111e:	b010      	add	sp, #64	; 0x40
 8001120:	bd10      	pop	{r4, pc}
	...

08001124 <processUartMessage>:
			SendMessage("incorrect command !\n\r");
		}
		UART_NewMessage = 0;
}

uint8_t processUartMessage(char* string) {
 8001124:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}

//	char str1[6];
	int8_t id = -1;
	uint8_t x;
	char str1[3] = {0,0,0};
 8001128:	2300      	movs	r3, #0

	_index = strstr(string,"help");
 800112a:	4922      	ldr	r1, [pc, #136]	; (80011b4 <processUartMessage+0x90>)
uint8_t processUartMessage(char* string) {
 800112c:	4605      	mov	r5, r0
	char str1[3] = {0,0,0};
 800112e:	f88d 3004 	strb.w	r3, [sp, #4]
 8001132:	f88d 3005 	strb.w	r3, [sp, #5]
 8001136:	f88d 3006 	strb.w	r3, [sp, #6]
	_index = strstr(string,"help");
 800113a:	f000 fbf5 	bl	8001928 <strstr>
 800113e:	4c1e      	ldr	r4, [pc, #120]	; (80011b8 <processUartMessage+0x94>)
 8001140:	6020      	str	r0, [r4, #0]
 8001142:	4626      	mov	r6, r4
    if(_index!=NULL) return UART_CMD_HELP;
 8001144:	2800      	cmp	r0, #0
 8001146:	d133      	bne.n	80011b0 <processUartMessage+0x8c>
    else {
    	_index = strstr(string,"cfg:");
 8001148:	491c      	ldr	r1, [pc, #112]	; (80011bc <processUartMessage+0x98>)
 800114a:	4628      	mov	r0, r5
 800114c:	f000 fbec 	bl	8001928 <strstr>
 8001150:	6020      	str	r0, [r4, #0]
    	if (_index!=NULL) {
 8001152:	b310      	cbz	r0, 800119a <processUartMessage+0x76>
 8001154:	2401      	movs	r4, #1
    		for (x=0; x<10; x++) {
    			char string_temp[5];
    			snprintf(string_temp,sizeof(string_temp),"ch%02X", x+1);
 8001156:	4f1a      	ldr	r7, [pc, #104]	; (80011c0 <processUartMessage+0x9c>)
    			_index = strstr(string,string_temp);
    			if (_index != NULL) {
    	    		memcpy(str1, _index  + 5, 2);
    				pwmChannel[x] = (uint8_t)hexToInt(str1);
 8001158:	f8df 806c 	ldr.w	r8, [pc, #108]	; 80011c8 <processUartMessage+0xa4>
    			snprintf(string_temp,sizeof(string_temp),"ch%02X", x+1);
 800115c:	4623      	mov	r3, r4
 800115e:	463a      	mov	r2, r7
 8001160:	2105      	movs	r1, #5
 8001162:	a802      	add	r0, sp, #8
 8001164:	f000 fbac 	bl	80018c0 <sniprintf>
    			_index = strstr(string,string_temp);
 8001168:	a902      	add	r1, sp, #8
 800116a:	4628      	mov	r0, r5
 800116c:	f000 fbdc 	bl	8001928 <strstr>
 8001170:	6030      	str	r0, [r6, #0]
    			if (_index != NULL) {
 8001172:	b150      	cbz	r0, 800118a <processUartMessage+0x66>
    	    		memcpy(str1, _index  + 5, 2);
 8001174:	f8b0 3005 	ldrh.w	r3, [r0, #5]
 8001178:	a804      	add	r0, sp, #16
 800117a:	f820 3d0c 	strh.w	r3, [r0, #-12]!
    				pwmChannel[x] = (uint8_t)hexToInt(str1);
 800117e:	f7ff ff79 	bl	8001074 <hexToInt>
 8001182:	eb04 0308 	add.w	r3, r4, r8
 8001186:	f803 0c01 	strb.w	r0, [r3, #-1]
 800118a:	3401      	adds	r4, #1
    		for (x=0; x<10; x++) {
 800118c:	2c0b      	cmp	r4, #11
 800118e:	d1e5      	bne.n	800115c <processUartMessage+0x38>
    			}
    		}
    		id = UART_CMD_CONFIG_CHANNEL;
 8001190:	2002      	movs	r0, #2
        	_index = strstr(string,"off");
        	if (_index!=NULL) {
        		id = UART_CMD_OFF_ALL;
        	}
    	}
    	return id;
 8001192:	b2c0      	uxtb	r0, r0
    }
}
 8001194:	b004      	add	sp, #16
 8001196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        	_index = strstr(string,"off");
 800119a:	490a      	ldr	r1, [pc, #40]	; (80011c4 <processUartMessage+0xa0>)
 800119c:	4628      	mov	r0, r5
 800119e:	f000 fbc3 	bl	8001928 <strstr>
        		id = UART_CMD_OFF_ALL;
 80011a2:	2800      	cmp	r0, #0
        	_index = strstr(string,"off");
 80011a4:	6020      	str	r0, [r4, #0]
        		id = UART_CMD_OFF_ALL;
 80011a6:	bf0c      	ite	eq
 80011a8:	f04f 30ff 	moveq.w	r0, #4294967295
 80011ac:	2003      	movne	r0, #3
 80011ae:	e7f0      	b.n	8001192 <processUartMessage+0x6e>
    if(_index!=NULL) return UART_CMD_HELP;
 80011b0:	2001      	movs	r0, #1
 80011b2:	e7ef      	b.n	8001194 <processUartMessage+0x70>
 80011b4:	0800239e 	.word	0x0800239e
 80011b8:	200001d4 	.word	0x200001d4
 80011bc:	080023a3 	.word	0x080023a3
 80011c0:	080023a8 	.word	0x080023a8
 80011c4:	080023af 	.word	0x080023af
 80011c8:	20000148 	.word	0x20000148

080011cc <SendMessage>:

void OutputHelpString() {
	SendMessage(helpString);
}

void SendMessage(char string[]) {
 80011cc:	b510      	push	{r4, lr}
 80011ce:	4604      	mov	r4, r0

//	while (UART_TX_Busy){};
//	UART_TX_Busy = 1;
//	snprintf(string_out,sizeof(string_out),string);
	HAL_UART_Transmit(&huart1,(uint8_t*)string,strlen(string), HAL_MAX_DELAY);
 80011d0:	f7fe ffbc 	bl	800014c <strlen>
 80011d4:	4621      	mov	r1, r4
//	CDC_Transmit_FS((uint8_t)string, (uint16_t)strlen(string));
}
 80011d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_UART_Transmit(&huart1,(uint8_t*)string,strlen(string), HAL_MAX_DELAY);
 80011da:	b282      	uxth	r2, r0
 80011dc:	f04f 33ff 	mov.w	r3, #4294967295
 80011e0:	4801      	ldr	r0, [pc, #4]	; (80011e8 <SendMessage+0x1c>)
 80011e2:	f7ff be8d 	b.w	8000f00 <HAL_UART_Transmit>
 80011e6:	bf00      	nop
 80011e8:	20000194 	.word	0x20000194

080011ec <OutputHelpString>:
	SendMessage(helpString);
 80011ec:	4801      	ldr	r0, [pc, #4]	; (80011f4 <OutputHelpString+0x8>)
 80011ee:	f7ff bfed 	b.w	80011cc <SendMessage>
 80011f2:	bf00      	nop
 80011f4:	0800220a 	.word	0x0800220a

080011f8 <UartCommandProcessor>:
void UartCommandProcessor() {
 80011f8:	b530      	push	{r4, r5, lr}
 80011fa:	b08f      	sub	sp, #60	; 0x3c
		snprintf(string_temp,sizeof(string_temp),"<UART0> incoming message: %s\n\r", rxString);
 80011fc:	4b19      	ldr	r3, [pc, #100]	; (8001264 <UartCommandProcessor+0x6c>)
 80011fe:	4a1a      	ldr	r2, [pc, #104]	; (8001268 <UartCommandProcessor+0x70>)
 8001200:	2132      	movs	r1, #50	; 0x32
 8001202:	a801      	add	r0, sp, #4
 8001204:	f000 fb5c 	bl	80018c0 <sniprintf>
		SendMessage(string_temp);
 8001208:	a801      	add	r0, sp, #4
 800120a:	f7ff ffdf 	bl	80011cc <SendMessage>
		message_id = processUartMessage(rxString);
 800120e:	4815      	ldr	r0, [pc, #84]	; (8001264 <UartCommandProcessor+0x6c>)
 8001210:	f7ff ff88 	bl	8001124 <processUartMessage>
 8001214:	4604      	mov	r4, r0
			SendMessage("- check command success.\n\r");
 8001216:	4815      	ldr	r0, [pc, #84]	; (800126c <UartCommandProcessor+0x74>)
 8001218:	f7ff ffd8 	bl	80011cc <SendMessage>
			switch (message_id) {
 800121c:	2c02      	cmp	r4, #2
 800121e:	d00a      	beq.n	8001236 <UartCommandProcessor+0x3e>
 8001220:	2c03      	cmp	r4, #3
 8001222:	d012      	beq.n	800124a <UartCommandProcessor+0x52>
 8001224:	2c01      	cmp	r4, #1
 8001226:	d101      	bne.n	800122c <UartCommandProcessor+0x34>
				OutputHelpString();
 8001228:	f7ff ffe0 	bl	80011ec <OutputHelpString>
		UART_NewMessage = 0;
 800122c:	2200      	movs	r2, #0
 800122e:	4b10      	ldr	r3, [pc, #64]	; (8001270 <UartCommandProcessor+0x78>)
 8001230:	701a      	strb	r2, [r3, #0]
}
 8001232:	b00f      	add	sp, #60	; 0x3c
 8001234:	bd30      	pop	{r4, r5, pc}
			switch (message_id) {
 8001236:	2200      	movs	r2, #0
					setPwmChannel(x, pwmChannel[x]);
 8001238:	4c0e      	ldr	r4, [pc, #56]	; (8001274 <UartCommandProcessor+0x7c>)
 800123a:	5ca1      	ldrb	r1, [r4, r2]
 800123c:	b2d0      	uxtb	r0, r2
 800123e:	f7ff feef 	bl	8001020 <setPwmChannel>
 8001242:	3201      	adds	r2, #1
				for (uint8_t x=0; x<10; x++) {
 8001244:	2a0a      	cmp	r2, #10
 8001246:	d1f8      	bne.n	800123a <UartCommandProcessor+0x42>
 8001248:	e7f0      	b.n	800122c <UartCommandProcessor+0x34>
			switch (message_id) {
 800124a:	2200      	movs	r2, #0
					pwmChannel[x] = 0;
 800124c:	4615      	mov	r5, r2
 800124e:	4c09      	ldr	r4, [pc, #36]	; (8001274 <UartCommandProcessor+0x7c>)
 8001250:	5515      	strb	r5, [r2, r4]
					setPwmChannel(x, 0);
 8001252:	b2d0      	uxtb	r0, r2
 8001254:	2100      	movs	r1, #0
 8001256:	f7ff fee3 	bl	8001020 <setPwmChannel>
 800125a:	3201      	adds	r2, #1
				for (uint8_t x=0; x<10; x++) {
 800125c:	2a0a      	cmp	r2, #10
 800125e:	d1f7      	bne.n	8001250 <UartCommandProcessor+0x58>
 8001260:	e7e4      	b.n	800122c <UartCommandProcessor+0x34>
 8001262:	bf00      	nop
 8001264:	200000a4 	.word	0x200000a4
 8001268:	080021d0 	.word	0x080021d0
 800126c:	080021ef 	.word	0x080021ef
 8001270:	20000090 	.word	0x20000090
 8001274:	20000148 	.word	0x20000148

08001278 <main>:
{
 8001278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800127a:	b08f      	sub	sp, #60	; 0x3c
  HAL_Init();
 800127c:	f7fe ff92 	bl	80001a4 <HAL_Init>
  SystemClock_Config();
 8001280:	f7ff ff16 	bl	80010b0 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001284:	4b8f      	ldr	r3, [pc, #572]	; (80014c4 <main+0x24c>)
  htim2.Instance = TIM2;
 8001286:	4c90      	ldr	r4, [pc, #576]	; (80014c8 <main+0x250>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001288:	699a      	ldr	r2, [r3, #24]
  htim2.Init.Period = 1024;
 800128a:	f44f 6780 	mov.w	r7, #1024	; 0x400
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800128e:	f042 0210 	orr.w	r2, r2, #16
 8001292:	619a      	str	r2, [r3, #24]
 8001294:	699a      	ldr	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001296:	4620      	mov	r0, r4
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001298:	f002 0210 	and.w	r2, r2, #16
 800129c:	9201      	str	r2, [sp, #4]
 800129e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012a0:	699a      	ldr	r2, [r3, #24]
 80012a2:	f042 0220 	orr.w	r2, r2, #32
 80012a6:	619a      	str	r2, [r3, #24]
 80012a8:	699a      	ldr	r2, [r3, #24]
 80012aa:	f002 0220 	and.w	r2, r2, #32
 80012ae:	9202      	str	r2, [sp, #8]
 80012b0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b2:	699a      	ldr	r2, [r3, #24]
 80012b4:	f042 0204 	orr.w	r2, r2, #4
 80012b8:	619a      	str	r2, [r3, #24]
 80012ba:	699a      	ldr	r2, [r3, #24]
 80012bc:	f002 0204 	and.w	r2, r2, #4
 80012c0:	9203      	str	r2, [sp, #12]
 80012c2:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c4:	699a      	ldr	r2, [r3, #24]
 80012c6:	f042 0208 	orr.w	r2, r2, #8
 80012ca:	619a      	str	r2, [r3, #24]
 80012cc:	699b      	ldr	r3, [r3, #24]
  htim2.Init.Period = 1024;
 80012ce:	60e7      	str	r7, [r4, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d0:	f003 0308 	and.w	r3, r3, #8
 80012d4:	9304      	str	r3, [sp, #16]
 80012d6:	9b04      	ldr	r3, [sp, #16]
  htim2.Instance = TIM2;
 80012d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012dc:	6023      	str	r3, [r4, #0]
  htim2.Init.Prescaler = 0;
 80012de:	2300      	movs	r3, #0
 80012e0:	6063      	str	r3, [r4, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e2:	60a3      	str	r3, [r4, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e4:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e6:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012e8:	f7ff fc2a 	bl	8000b40 <HAL_TIM_PWM_Init>
 80012ec:	b100      	cbz	r0, 80012f0 <main+0x78>
 80012ee:	e7fe      	b.n	80012ee <main+0x76>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012f0:	9005      	str	r0, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012f2:	9006      	str	r0, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012f4:	a905      	add	r1, sp, #20
 80012f6:	4620      	mov	r0, r4
 80012f8:	f7ff fcec 	bl	8000cd4 <HAL_TIMEx_MasterConfigSynchronization>
 80012fc:	4602      	mov	r2, r0
 80012fe:	b100      	cbz	r0, 8001302 <main+0x8a>
 8001300:	e7fe      	b.n	8001300 <main+0x88>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001302:	2660      	movs	r6, #96	; 0x60
  sConfigOC.Pulse = 0;
 8001304:	9008      	str	r0, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001306:	9009      	str	r0, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001308:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800130a:	a907      	add	r1, sp, #28
 800130c:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800130e:	9607      	str	r6, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001310:	f7ff fc5c 	bl	8000bcc <HAL_TIM_PWM_ConfigChannel>
 8001314:	b100      	cbz	r0, 8001318 <main+0xa0>
 8001316:	e7fe      	b.n	8001316 <main+0x9e>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001318:	2204      	movs	r2, #4
 800131a:	a907      	add	r1, sp, #28
 800131c:	4620      	mov	r0, r4
 800131e:	f7ff fc55 	bl	8000bcc <HAL_TIM_PWM_ConfigChannel>
 8001322:	b100      	cbz	r0, 8001326 <main+0xae>
 8001324:	e7fe      	b.n	8001324 <main+0xac>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001326:	2208      	movs	r2, #8
 8001328:	a907      	add	r1, sp, #28
 800132a:	4620      	mov	r0, r4
 800132c:	f7ff fc4e 	bl	8000bcc <HAL_TIM_PWM_ConfigChannel>
 8001330:	b100      	cbz	r0, 8001334 <main+0xbc>
 8001332:	e7fe      	b.n	8001332 <main+0xba>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001334:	220c      	movs	r2, #12
 8001336:	a907      	add	r1, sp, #28
 8001338:	4620      	mov	r0, r4
 800133a:	f7ff fc47 	bl	8000bcc <HAL_TIM_PWM_ConfigChannel>
 800133e:	4605      	mov	r5, r0
 8001340:	b100      	cbz	r0, 8001344 <main+0xcc>
 8001342:	e7fe      	b.n	8001342 <main+0xca>
  HAL_TIM_MspPostInit(&htim2);
 8001344:	4620      	mov	r0, r4
  htim3.Instance = TIM3;
 8001346:	4c61      	ldr	r4, [pc, #388]	; (80014cc <main+0x254>)
  HAL_TIM_MspPostInit(&htim2);
 8001348:	f000 f9b2 	bl	80016b0 <HAL_TIM_MspPostInit>
  htim3.Instance = TIM3;
 800134c:	4b60      	ldr	r3, [pc, #384]	; (80014d0 <main+0x258>)
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800134e:	4620      	mov	r0, r4
  htim3.Init.Prescaler = 0;
 8001350:	e884 0028 	stmia.w	r4, {r3, r5}
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001354:	60a5      	str	r5, [r4, #8]
  htim3.Init.Period = 1024;
 8001356:	60e7      	str	r7, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001358:	6125      	str	r5, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800135a:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800135c:	f7ff fbf0 	bl	8000b40 <HAL_TIM_PWM_Init>
 8001360:	b100      	cbz	r0, 8001364 <main+0xec>
 8001362:	e7fe      	b.n	8001362 <main+0xea>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001364:	9005      	str	r0, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001366:	9006      	str	r0, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001368:	a905      	add	r1, sp, #20
 800136a:	4620      	mov	r0, r4
 800136c:	f7ff fcb2 	bl	8000cd4 <HAL_TIMEx_MasterConfigSynchronization>
 8001370:	4602      	mov	r2, r0
 8001372:	b100      	cbz	r0, 8001376 <main+0xfe>
 8001374:	e7fe      	b.n	8001374 <main+0xfc>
  sConfigOC.Pulse = 0;
 8001376:	9008      	str	r0, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001378:	9009      	str	r0, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800137a:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800137c:	a907      	add	r1, sp, #28
 800137e:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001380:	9607      	str	r6, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001382:	f7ff fc23 	bl	8000bcc <HAL_TIM_PWM_ConfigChannel>
 8001386:	b100      	cbz	r0, 800138a <main+0x112>
 8001388:	e7fe      	b.n	8001388 <main+0x110>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800138a:	2204      	movs	r2, #4
 800138c:	a907      	add	r1, sp, #28
 800138e:	4620      	mov	r0, r4
 8001390:	f7ff fc1c 	bl	8000bcc <HAL_TIM_PWM_ConfigChannel>
 8001394:	b100      	cbz	r0, 8001398 <main+0x120>
 8001396:	e7fe      	b.n	8001396 <main+0x11e>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001398:	2208      	movs	r2, #8
 800139a:	a907      	add	r1, sp, #28
 800139c:	484b      	ldr	r0, [pc, #300]	; (80014cc <main+0x254>)
 800139e:	f7ff fc15 	bl	8000bcc <HAL_TIM_PWM_ConfigChannel>
 80013a2:	b100      	cbz	r0, 80013a6 <main+0x12e>
 80013a4:	e7fe      	b.n	80013a4 <main+0x12c>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013a6:	220c      	movs	r2, #12
 80013a8:	a907      	add	r1, sp, #28
 80013aa:	4848      	ldr	r0, [pc, #288]	; (80014cc <main+0x254>)
 80013ac:	f7ff fc0e 	bl	8000bcc <HAL_TIM_PWM_ConfigChannel>
 80013b0:	4605      	mov	r5, r0
 80013b2:	b100      	cbz	r0, 80013b6 <main+0x13e>
 80013b4:	e7fe      	b.n	80013b4 <main+0x13c>
  HAL_TIM_MspPostInit(&htim3);
 80013b6:	4845      	ldr	r0, [pc, #276]	; (80014cc <main+0x254>)
 80013b8:	f000 f97a 	bl	80016b0 <HAL_TIM_MspPostInit>
  htim4.Instance = TIM4;
 80013bc:	4c45      	ldr	r4, [pc, #276]	; (80014d4 <main+0x25c>)
 80013be:	4b46      	ldr	r3, [pc, #280]	; (80014d8 <main+0x260>)
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80013c0:	4620      	mov	r0, r4
  htim4.Init.Prescaler = 0;
 80013c2:	e884 0028 	stmia.w	r4, {r3, r5}
  htim4.Init.Period = 1024;
 80013c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ca:	60a5      	str	r5, [r4, #8]
  htim4.Init.Period = 1024;
 80013cc:	60e3      	str	r3, [r4, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ce:	6125      	str	r5, [r4, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d0:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80013d2:	f7ff fbb5 	bl	8000b40 <HAL_TIM_PWM_Init>
 80013d6:	b100      	cbz	r0, 80013da <main+0x162>
 80013d8:	e7fe      	b.n	80013d8 <main+0x160>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013da:	9005      	str	r0, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013dc:	9006      	str	r0, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013de:	a905      	add	r1, sp, #20
 80013e0:	4620      	mov	r0, r4
 80013e2:	f7ff fc77 	bl	8000cd4 <HAL_TIMEx_MasterConfigSynchronization>
 80013e6:	4602      	mov	r2, r0
 80013e8:	b100      	cbz	r0, 80013ec <main+0x174>
 80013ea:	e7fe      	b.n	80013ea <main+0x172>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013ec:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 80013ee:	9008      	str	r0, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013f0:	9009      	str	r0, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013f2:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013f4:	a907      	add	r1, sp, #28
 80013f6:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013f8:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013fa:	f7ff fbe7 	bl	8000bcc <HAL_TIM_PWM_ConfigChannel>
 80013fe:	b100      	cbz	r0, 8001402 <main+0x18a>
 8001400:	e7fe      	b.n	8001400 <main+0x188>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001402:	2204      	movs	r2, #4
 8001404:	a907      	add	r1, sp, #28
 8001406:	4620      	mov	r0, r4
 8001408:	f7ff fbe0 	bl	8000bcc <HAL_TIM_PWM_ConfigChannel>
 800140c:	4605      	mov	r5, r0
 800140e:	b100      	cbz	r0, 8001412 <main+0x19a>
 8001410:	e7fe      	b.n	8001410 <main+0x198>
  HAL_TIM_MspPostInit(&htim4);
 8001412:	4620      	mov	r0, r4
 8001414:	f000 f94c 	bl	80016b0 <HAL_TIM_MspPostInit>
  huart1.Init.BaudRate = 115200;
 8001418:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Instance = USART1;
 800141c:	4c2f      	ldr	r4, [pc, #188]	; (80014dc <main+0x264>)
  huart1.Init.BaudRate = 115200;
 800141e:	4a30      	ldr	r2, [pc, #192]	; (80014e0 <main+0x268>)
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001420:	4620      	mov	r0, r4
  huart1.Init.BaudRate = 115200;
 8001422:	e884 000c 	stmia.w	r4, {r2, r3}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001426:	230c      	movs	r3, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001428:	60a5      	str	r5, [r4, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800142a:	60e5      	str	r5, [r4, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800142c:	6125      	str	r5, [r4, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800142e:	61a5      	str	r5, [r4, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001430:	61e5      	str	r5, [r4, #28]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001432:	6163      	str	r3, [r4, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001434:	f7ff fd36 	bl	8000ea4 <HAL_UART_Init>
 8001438:	4605      	mov	r5, r0
 800143a:	b100      	cbz	r0, 800143e <main+0x1c6>
 800143c:	e7fe      	b.n	800143c <main+0x1c4>
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 800143e:	6822      	ldr	r2, [r4, #0]
  SendMessage("\n\rKernel started on ....\n\r");
 8001440:	4828      	ldr	r0, [pc, #160]	; (80014e4 <main+0x26c>)
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8001442:	68d3      	ldr	r3, [r2, #12]
 8001444:	f043 0320 	orr.w	r3, r3, #32
 8001448:	60d3      	str	r3, [r2, #12]
  SendMessage("\n\rKernel started on ....\n\r");
 800144a:	f7ff febf 	bl	80011cc <SendMessage>
  SendMessage(versionTitle);
 800144e:	4826      	ldr	r0, [pc, #152]	; (80014e8 <main+0x270>)
 8001450:	f7ff febc 	bl	80011cc <SendMessage>
  SendMessage("\n\rtesting hardware...");
 8001454:	4825      	ldr	r0, [pc, #148]	; (80014ec <main+0x274>)
 8001456:	f7ff feb9 	bl	80011cc <SendMessage>
	  setPwmChannel(ch, 0);
 800145a:	b2e8      	uxtb	r0, r5
 800145c:	2100      	movs	r1, #0
 800145e:	3501      	adds	r5, #1
 8001460:	f7ff fdde 	bl	8001020 <setPwmChannel>
  for (uint8_t ch=0;ch<10;ch++) {
 8001464:	2d0a      	cmp	r5, #10
 8001466:	d1f8      	bne.n	800145a <main+0x1e2>
  StartTimers();
 8001468:	f7ff fda6 	bl	8000fb8 <StartTimers>
 800146c:	2404      	movs	r4, #4
  SendMessage("\n\rtesting hardware...");
 800146e:	2200      	movs	r2, #0
		  setPwmChannel(ch, 255);
 8001470:	b2d0      	uxtb	r0, r2
 8001472:	21ff      	movs	r1, #255	; 0xff
 8001474:	f7ff fdd4 	bl	8001020 <setPwmChannel>
 8001478:	3201      	adds	r2, #1
	  for (uint8_t ch=0;ch<10;ch++) {
 800147a:	2a0a      	cmp	r2, #10
 800147c:	d1f8      	bne.n	8001470 <main+0x1f8>
	  HAL_Delay(100);
 800147e:	2064      	movs	r0, #100	; 0x64
 8001480:	f7fe feb4 	bl	80001ec <HAL_Delay>
 8001484:	2200      	movs	r2, #0
		  setPwmChannel(ch, 0);
 8001486:	b2d0      	uxtb	r0, r2
 8001488:	2100      	movs	r1, #0
 800148a:	f7ff fdc9 	bl	8001020 <setPwmChannel>
 800148e:	3201      	adds	r2, #1
	  for (uint8_t ch=0;ch<10;ch++) {
 8001490:	2a0a      	cmp	r2, #10
 8001492:	d1f8      	bne.n	8001486 <main+0x20e>
	  HAL_Delay(300);
 8001494:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001498:	3c01      	subs	r4, #1
 800149a:	f7fe fea7 	bl	80001ec <HAL_Delay>
  for (uint8_t a=0;a<4;a++) {
 800149e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80014a2:	d1e4      	bne.n	800146e <main+0x1f6>
  SendMessage("-ok...\n\r");
 80014a4:	4812      	ldr	r0, [pc, #72]	; (80014f0 <main+0x278>)
 80014a6:	f7ff fe91 	bl	80011cc <SendMessage>
  OutputHelpString();
 80014aa:	f7ff fe9f 	bl	80011ec <OutputHelpString>
	  if (UART_NewMessage == 1) {
 80014ae:	4c11      	ldr	r4, [pc, #68]	; (80014f4 <main+0x27c>)
 80014b0:	7823      	ldrb	r3, [r4, #0]
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d101      	bne.n	80014ba <main+0x242>
		  UartCommandProcessor();
 80014b6:	f7ff fe9f 	bl	80011f8 <UartCommandProcessor>
	  HAL_Delay(1);
 80014ba:	2001      	movs	r0, #1
 80014bc:	f7fe fe96 	bl	80001ec <HAL_Delay>
	  if (UART_NewMessage == 1) {
 80014c0:	e7f6      	b.n	80014b0 <main+0x238>
 80014c2:	bf00      	nop
 80014c4:	40021000 	.word	0x40021000
 80014c8:	200001d8 	.word	0x200001d8
 80014cc:	20000154 	.word	0x20000154
 80014d0:	40000400 	.word	0x40000400
 80014d4:	20000108 	.word	0x20000108
 80014d8:	40000800 	.word	0x40000800
 80014dc:	20000194 	.word	0x20000194
 80014e0:	40013800 	.word	0x40013800
 80014e4:	08002364 	.word	0x08002364
 80014e8:	080023b3 	.word	0x080023b3
 80014ec:	0800237f 	.word	0x0800237f
 80014f0:	08002395 	.word	0x08002395
 80014f4:	20000090 	.word	0x20000090

080014f8 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	static short int UART1_rxindex = 0;
	static uint8_t UART1_ErrorFlag = UART_PACKET_OK;

		UART1_rxBuffer = (uint8_t)huart->Instance->DR;
 80014f8:	6803      	ldr	r3, [r0, #0]
 80014fa:	4a25      	ldr	r2, [pc, #148]	; (8001590 <HAL_UART_RxCpltCallback+0x98>)
 80014fc:	685b      	ldr	r3, [r3, #4]
{
 80014fe:	b570      	push	{r4, r5, r6, lr}
		UART1_rxBuffer = (uint8_t)huart->Instance->DR;
 8001500:	b2db      	uxtb	r3, r3
		if (UART1_rxBuffer == 8 || UART1_rxBuffer == 127) // If Backspace or del
 8001502:	2b08      	cmp	r3, #8
{
 8001504:	4604      	mov	r4, r0
		UART1_rxBuffer = (uint8_t)huart->Instance->DR;
 8001506:	7013      	strb	r3, [r2, #0]
		if (UART1_rxBuffer == 8 || UART1_rxBuffer == 127) // If Backspace or del
 8001508:	d001      	beq.n	800150e <HAL_UART_RxCpltCallback+0x16>
 800150a:	2b7f      	cmp	r3, #127	; 0x7f
 800150c:	d10d      	bne.n	800152a <HAL_UART_RxCpltCallback+0x32>
		{
			UART1_rxindex--;
 800150e:	4a21      	ldr	r2, [pc, #132]	; (8001594 <HAL_UART_RxCpltCallback+0x9c>)
 8001510:	8813      	ldrh	r3, [r2, #0]
 8001512:	3b01      	subs	r3, #1
 8001514:	b21b      	sxth	r3, r3
			if (UART1_rxindex < 0) UART1_rxindex = 0;
 8001516:	2b00      	cmp	r3, #0
 8001518:	bfb8      	it	lt
 800151a:	2300      	movlt	r3, #0
 800151c:	8013      	strh	r3, [r2, #0]
					rxString[UART1_rxindex] = '\000';
					UART_NewMessage = 1;
				}
			}
		}
		__HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800151e:	6822      	ldr	r2, [r4, #0]
 8001520:	68d3      	ldr	r3, [r2, #12]
 8001522:	f043 0320 	orr.w	r3, r3, #32
 8001526:	60d3      	str	r3, [r2, #12]
 8001528:	bd70      	pop	{r4, r5, r6, pc}
		else if (UART1_rxBuffer == '\n' || UART1_rxBuffer == '\r' || UART1_rxBuffer == '\0') // If Enter
 800152a:	2b0d      	cmp	r3, #13
 800152c:	bf9d      	ittte	ls
 800152e:	f242 4201 	movwls	r2, #9217	; 0x2401
 8001532:	40da      	lsrls	r2, r3
 8001534:	43d2      	mvnls	r2, r2
 8001536:	2201      	movhi	r2, #1
 8001538:	f012 0f01 	tst.w	r2, #1
 800153c:	4d16      	ldr	r5, [pc, #88]	; (8001598 <HAL_UART_RxCpltCallback+0xa0>)
 800153e:	d112      	bne.n	8001566 <HAL_UART_RxCpltCallback+0x6e>
			if (UART1_ErrorFlag == UART_PACKET_OK && UART1_rxindex)
 8001540:	782b      	ldrb	r3, [r5, #0]
 8001542:	b953      	cbnz	r3, 800155a <HAL_UART_RxCpltCallback+0x62>
 8001544:	4a13      	ldr	r2, [pc, #76]	; (8001594 <HAL_UART_RxCpltCallback+0x9c>)
 8001546:	f9b2 1000 	ldrsh.w	r1, [r2]
 800154a:	b131      	cbz	r1, 800155a <HAL_UART_RxCpltCallback+0x62>
				UART1_rxindex = 0;
 800154c:	8013      	strh	r3, [r2, #0]
				UART_NewMessage = 1;
 800154e:	2201      	movs	r2, #1
				rxString[UART1_rxindex] = 0;
 8001550:	4812      	ldr	r0, [pc, #72]	; (800159c <HAL_UART_RxCpltCallback+0xa4>)
 8001552:	5443      	strb	r3, [r0, r1]
				UART_NewMessage = 1;
 8001554:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <HAL_UART_RxCpltCallback+0xa8>)
 8001556:	701a      	strb	r2, [r3, #0]
 8001558:	e7e1      	b.n	800151e <HAL_UART_RxCpltCallback+0x26>
				SendMessage("ERROR > UART1 packet too long\n\r");
 800155a:	4812      	ldr	r0, [pc, #72]	; (80015a4 <HAL_UART_RxCpltCallback+0xac>)
 800155c:	f7ff fe36 	bl	80011cc <SendMessage>
				UART1_ErrorFlag = UART_PACKET_OK; // reset error state
 8001560:	2300      	movs	r3, #0
 8001562:	702b      	strb	r3, [r5, #0]
 8001564:	e7db      	b.n	800151e <HAL_UART_RxCpltCallback+0x26>
			if (UART1_rxBuffer != '\r' && UART1_ErrorFlag == UART_PACKET_OK) // Ignore return
 8001566:	7829      	ldrb	r1, [r5, #0]
 8001568:	2900      	cmp	r1, #0
 800156a:	d1d8      	bne.n	800151e <HAL_UART_RxCpltCallback+0x26>
				rxString[UART1_rxindex] = UART1_rxBuffer; // Add that character to the string
 800156c:	4809      	ldr	r0, [pc, #36]	; (8001594 <HAL_UART_RxCpltCallback+0x9c>)
 800156e:	4e0b      	ldr	r6, [pc, #44]	; (800159c <HAL_UART_RxCpltCallback+0xa4>)
 8001570:	f9b0 2000 	ldrsh.w	r2, [r0]
 8001574:	54b3      	strb	r3, [r6, r2]
				UART1_rxindex++;
 8001576:	1c53      	adds	r3, r2, #1
 8001578:	b21b      	sxth	r3, r3
				if (UART1_rxindex >= MAXSTRING) // User typing too much, we can't have commands that big
 800157a:	2b63      	cmp	r3, #99	; 0x63
				UART1_rxindex++;
 800157c:	8003      	strh	r3, [r0, #0]
				if (UART1_rxindex >= MAXSTRING) // User typing too much, we can't have commands that big
 800157e:	ddce      	ble.n	800151e <HAL_UART_RxCpltCallback+0x26>
					UART1_ErrorFlag = UART_PACKET_TOO_LONG;
 8001580:	2301      	movs	r3, #1
					UART_NewMessage = 1;
 8001582:	4a07      	ldr	r2, [pc, #28]	; (80015a0 <HAL_UART_RxCpltCallback+0xa8>)
					UART1_ErrorFlag = UART_PACKET_TOO_LONG;
 8001584:	702b      	strb	r3, [r5, #0]
					UART1_rxindex = 0;
 8001586:	8001      	strh	r1, [r0, #0]
					rxString[UART1_rxindex] = '\000';
 8001588:	7031      	strb	r1, [r6, #0]
					UART_NewMessage = 1;
 800158a:	7013      	strb	r3, [r2, #0]
 800158c:	e7c7      	b.n	800151e <HAL_UART_RxCpltCallback+0x26>
 800158e:	bf00      	nop
 8001590:	2000008d 	.word	0x2000008d
 8001594:	2000008e 	.word	0x2000008e
 8001598:	2000008c 	.word	0x2000008c
 800159c:	200000a4 	.word	0x200000a4
 80015a0:	20000090 	.word	0x20000090
 80015a4:	080021b0 	.word	0x080021b0

080015a8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015a8:	4b25      	ldr	r3, [pc, #148]	; (8001640 <HAL_MspInit+0x98>)
{
 80015aa:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 80015ac:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015ae:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 80015b0:	f042 0201 	orr.w	r2, r2, #1
 80015b4:	619a      	str	r2, [r3, #24]
 80015b6:	699a      	ldr	r2, [r3, #24]
 80015b8:	f002 0201 	and.w	r2, r2, #1
 80015bc:	9200      	str	r2, [sp, #0]
 80015be:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015c0:	69da      	ldr	r2, [r3, #28]
 80015c2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80015c6:	61da      	str	r2, [r3, #28]
 80015c8:	69db      	ldr	r3, [r3, #28]
 80015ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ce:	9301      	str	r3, [sp, #4]
 80015d0:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015d2:	f7fe fe1d 	bl	8000210 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80015d6:	2200      	movs	r2, #0
 80015d8:	f06f 000b 	mvn.w	r0, #11
 80015dc:	4611      	mov	r1, r2
 80015de:	f7fe fe29 	bl	8000234 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80015e2:	2200      	movs	r2, #0
 80015e4:	f06f 000a 	mvn.w	r0, #10
 80015e8:	4611      	mov	r1, r2
 80015ea:	f7fe fe23 	bl	8000234 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80015ee:	2200      	movs	r2, #0
 80015f0:	f06f 0009 	mvn.w	r0, #9
 80015f4:	4611      	mov	r1, r2
 80015f6:	f7fe fe1d 	bl	8000234 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80015fa:	2200      	movs	r2, #0
 80015fc:	f06f 0004 	mvn.w	r0, #4
 8001600:	4611      	mov	r1, r2
 8001602:	f7fe fe17 	bl	8000234 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001606:	2200      	movs	r2, #0
 8001608:	f06f 0003 	mvn.w	r0, #3
 800160c:	4611      	mov	r1, r2
 800160e:	f7fe fe11 	bl	8000234 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001612:	2200      	movs	r2, #0
 8001614:	f06f 0001 	mvn.w	r0, #1
 8001618:	4611      	mov	r1, r2
 800161a:	f7fe fe0b 	bl	8000234 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800161e:	2200      	movs	r2, #0
 8001620:	f04f 30ff 	mov.w	r0, #4294967295
 8001624:	4611      	mov	r1, r2
 8001626:	f7fe fe05 	bl	8000234 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800162a:	4a06      	ldr	r2, [pc, #24]	; (8001644 <HAL_MspInit+0x9c>)
 800162c:	6853      	ldr	r3, [r2, #4]
 800162e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001632:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001636:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001638:	b003      	add	sp, #12
 800163a:	f85d fb04 	ldr.w	pc, [sp], #4
 800163e:	bf00      	nop
 8001640:	40021000 	.word	0x40021000
 8001644:	40010000 	.word	0x40010000

08001648 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM2)
 8001648:	6803      	ldr	r3, [r0, #0]
{
 800164a:	b084      	sub	sp, #16
  if(htim_pwm->Instance==TIM2)
 800164c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001650:	d10c      	bne.n	800166c <HAL_TIM_PWM_MspInit+0x24>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001652:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001656:	69da      	ldr	r2, [r3, #28]
 8001658:	f042 0201 	orr.w	r2, r2, #1
 800165c:	61da      	str	r2, [r3, #28]
 800165e:	69db      	ldr	r3, [r3, #28]
 8001660:	f003 0301 	and.w	r3, r3, #1
 8001664:	9301      	str	r3, [sp, #4]
 8001666:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001668:	b004      	add	sp, #16
 800166a:	4770      	bx	lr
  else if(htim_pwm->Instance==TIM3)
 800166c:	4a0d      	ldr	r2, [pc, #52]	; (80016a4 <HAL_TIM_PWM_MspInit+0x5c>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d10a      	bne.n	8001688 <HAL_TIM_PWM_MspInit+0x40>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001672:	4b0d      	ldr	r3, [pc, #52]	; (80016a8 <HAL_TIM_PWM_MspInit+0x60>)
 8001674:	69da      	ldr	r2, [r3, #28]
 8001676:	f042 0202 	orr.w	r2, r2, #2
 800167a:	61da      	str	r2, [r3, #28]
 800167c:	69db      	ldr	r3, [r3, #28]
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	9302      	str	r3, [sp, #8]
 8001684:	9b02      	ldr	r3, [sp, #8]
 8001686:	e7ef      	b.n	8001668 <HAL_TIM_PWM_MspInit+0x20>
  else if(htim_pwm->Instance==TIM4)
 8001688:	4a08      	ldr	r2, [pc, #32]	; (80016ac <HAL_TIM_PWM_MspInit+0x64>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d1ec      	bne.n	8001668 <HAL_TIM_PWM_MspInit+0x20>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800168e:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <HAL_TIM_PWM_MspInit+0x60>)
 8001690:	69da      	ldr	r2, [r3, #28]
 8001692:	f042 0204 	orr.w	r2, r2, #4
 8001696:	61da      	str	r2, [r3, #28]
 8001698:	69db      	ldr	r3, [r3, #28]
 800169a:	f003 0304 	and.w	r3, r3, #4
 800169e:	9303      	str	r3, [sp, #12]
 80016a0:	9b03      	ldr	r3, [sp, #12]
}
 80016a2:	e7e1      	b.n	8001668 <HAL_TIM_PWM_MspInit+0x20>
 80016a4:	40000400 	.word	0x40000400
 80016a8:	40021000 	.word	0x40021000
 80016ac:	40000800 	.word	0x40000800

080016b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016b0:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM2)
 80016b2:	6803      	ldr	r3, [r0, #0]
{
 80016b4:	b085      	sub	sp, #20
  if(htim->Instance==TIM2)
 80016b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016ba:	d11c      	bne.n	80016f6 <HAL_TIM_MspPostInit+0x46>
    PB11     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016bc:	f640 4308 	movw	r3, #3080	; 0xc08
 80016c0:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016c2:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c4:	4669      	mov	r1, sp
 80016c6:	481b      	ldr	r0, [pc, #108]	; (8001734 <HAL_TIM_MspPostInit+0x84>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c8:	e88d 0028 	stmia.w	sp, {r3, r5}
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016cc:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ce:	f7fe fe19 	bl	8000304 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80016d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d6:	4669      	mov	r1, sp
 80016d8:	4817      	ldr	r0, [pc, #92]	; (8001738 <HAL_TIM_MspPostInit+0x88>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016da:	e88d 0028 	stmia.w	sp, {r3, r5}
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016de:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e0:	f7fe fe10 	bl	8000304 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_ENABLE();
 80016e4:	4a15      	ldr	r2, [pc, #84]	; (800173c <HAL_TIM_MspPostInit+0x8c>)
 80016e6:	6853      	ldr	r3, [r2, #4]
 80016e8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80016ec:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80016f0:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80016f2:	b005      	add	sp, #20
 80016f4:	bd30      	pop	{r4, r5, pc}
  else if(htim->Instance==TIM3)
 80016f6:	4a12      	ldr	r2, [pc, #72]	; (8001740 <HAL_TIM_MspPostInit+0x90>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d111      	bne.n	8001720 <HAL_TIM_MspPostInit+0x70>
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016fc:	2403      	movs	r4, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fe:	23c0      	movs	r3, #192	; 0xc0
 8001700:	2502      	movs	r5, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001702:	4669      	mov	r1, sp
 8001704:	480c      	ldr	r0, [pc, #48]	; (8001738 <HAL_TIM_MspPostInit+0x88>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001706:	e88d 0028 	stmia.w	sp, {r3, r5}
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800170a:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170c:	f7fe fdfa 	bl	8000304 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001710:	e88d 0030 	stmia.w	sp, {r4, r5}
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001714:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001716:	4669      	mov	r1, sp
 8001718:	4806      	ldr	r0, [pc, #24]	; (8001734 <HAL_TIM_MspPostInit+0x84>)
 800171a:	f7fe fdf3 	bl	8000304 <HAL_GPIO_Init>
}
 800171e:	e7e8      	b.n	80016f2 <HAL_TIM_MspPostInit+0x42>
  else if(htim->Instance==TIM4)
 8001720:	4a08      	ldr	r2, [pc, #32]	; (8001744 <HAL_TIM_MspPostInit+0x94>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d1e5      	bne.n	80016f2 <HAL_TIM_MspPostInit+0x42>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001726:	2302      	movs	r3, #2
 8001728:	22c0      	movs	r2, #192	; 0xc0
 800172a:	e88d 000c 	stmia.w	sp, {r2, r3}
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800172e:	2303      	movs	r3, #3
 8001730:	9303      	str	r3, [sp, #12]
 8001732:	e7f0      	b.n	8001716 <HAL_TIM_MspPostInit+0x66>
 8001734:	40010c00 	.word	0x40010c00
 8001738:	40010800 	.word	0x40010800
 800173c:	40010000 	.word	0x40010000
 8001740:	40000400 	.word	0x40000400
 8001744:	40000800 	.word	0x40000800

08001748 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001748:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800174a:	6802      	ldr	r2, [r0, #0]
 800174c:	4b16      	ldr	r3, [pc, #88]	; (80017a8 <HAL_UART_MspInit+0x60>)
{
 800174e:	b087      	sub	sp, #28
  if(huart->Instance==USART1)
 8001750:	429a      	cmp	r2, r3
 8001752:	d127      	bne.n	80017a4 <HAL_UART_MspInit+0x5c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001754:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001758:	699a      	ldr	r2, [r3, #24]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175a:	2502      	movs	r5, #2
    __HAL_RCC_USART1_CLK_ENABLE();
 800175c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001760:	619a      	str	r2, [r3, #24]
 8001762:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001764:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8001766:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800176a:	9301      	str	r3, [sp, #4]
 800176c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800176e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001772:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001774:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001776:	480d      	ldr	r0, [pc, #52]	; (80017ac <HAL_UART_MspInit+0x64>)

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001778:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800177a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177c:	9503      	str	r5, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177e:	f7fe fdc1 	bl	8000304 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001782:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001786:	a902      	add	r1, sp, #8
 8001788:	4808      	ldr	r0, [pc, #32]	; (80017ac <HAL_UART_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800178a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800178c:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800178e:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001790:	f7fe fdb8 	bl	8000304 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001794:	2025      	movs	r0, #37	; 0x25
 8001796:	4622      	mov	r2, r4
 8001798:	4621      	mov	r1, r4
 800179a:	f7fe fd4b 	bl	8000234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800179e:	2025      	movs	r0, #37	; 0x25
 80017a0:	f7fe fd7c 	bl	800029c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80017a4:	b007      	add	sp, #28
 80017a6:	bd30      	pop	{r4, r5, pc}
 80017a8:	40013800 	.word	0x40013800
 80017ac:	40010800 	.word	0x40010800

080017b0 <NMI_Handler>:
 80017b0:	4770      	bx	lr

080017b2 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80017b2:	e7fe      	b.n	80017b2 <HardFault_Handler>

080017b4 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80017b4:	e7fe      	b.n	80017b4 <MemManage_Handler>

080017b6 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80017b6:	e7fe      	b.n	80017b6 <BusFault_Handler>

080017b8 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80017b8:	e7fe      	b.n	80017b8 <UsageFault_Handler>

080017ba <SVC_Handler>:
 80017ba:	4770      	bx	lr

080017bc <DebugMon_Handler>:
 80017bc:	4770      	bx	lr

080017be <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80017be:	4770      	bx	lr

080017c0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80017c0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017c2:	f7fe fd01 	bl	80001c8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80017ca:	f7fe bd96 	b.w	80002fa <HAL_SYSTICK_IRQHandler>
	...

080017d0 <USART1_IRQHandler>:
* @brief This function handles USART1 global interrupt.
*/
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */
	if (~__HAL_UART_GET_IT_SOURCE(&huart1, UART_IT_RXNE)) { // UART_IT_RXNE)) {
 80017d0:	4802      	ldr	r0, [pc, #8]	; (80017dc <USART1_IRQHandler+0xc>)
 80017d2:	6803      	ldr	r3, [r0, #0]
 80017d4:	68db      	ldr	r3, [r3, #12]
		HAL_UART_RxCpltCallback(&huart1);
 80017d6:	f7ff be8f 	b.w	80014f8 <HAL_UART_RxCpltCallback>
 80017da:	bf00      	nop
 80017dc:	20000194 	.word	0x20000194

080017e0 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80017e0:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <SystemInit+0x40>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	f042 0201 	orr.w	r2, r2, #1
 80017e8:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80017ea:	6859      	ldr	r1, [r3, #4]
 80017ec:	4a0d      	ldr	r2, [pc, #52]	; (8001824 <SystemInit+0x44>)
 80017ee:	400a      	ands	r2, r1
 80017f0:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80017f8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80017fc:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001804:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001806:	685a      	ldr	r2, [r3, #4]
 8001808:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800180c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800180e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001812:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001814:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001818:	4b03      	ldr	r3, [pc, #12]	; (8001828 <SystemInit+0x48>)
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	40021000 	.word	0x40021000
 8001824:	f8ff0000 	.word	0xf8ff0000
 8001828:	e000ed00 	.word	0xe000ed00

0800182c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800182c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800182e:	e003      	b.n	8001838 <LoopCopyDataInit>

08001830 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001830:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001832:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001834:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001836:	3104      	adds	r1, #4

08001838 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001838:	480a      	ldr	r0, [pc, #40]	; (8001864 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800183a:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800183c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800183e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001840:	d3f6      	bcc.n	8001830 <CopyDataInit>
  ldr r2, =_sbss
 8001842:	4a0a      	ldr	r2, [pc, #40]	; (800186c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001844:	e002      	b.n	800184c <LoopFillZerobss>

08001846 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001846:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001848:	f842 3b04 	str.w	r3, [r2], #4

0800184c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800184c:	4b08      	ldr	r3, [pc, #32]	; (8001870 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800184e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001850:	d3f9      	bcc.n	8001846 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001852:	f7ff ffc5 	bl	80017e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001856:	f000 f80f 	bl	8001878 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800185a:	f7ff fd0d 	bl	8001278 <main>
  bx lr
 800185e:	4770      	bx	lr
  ldr r3, =_sidata
 8001860:	08002468 	.word	0x08002468
  ldr r0, =_sdata
 8001864:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001868:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 800186c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8001870:	2000021c 	.word	0x2000021c

08001874 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001874:	e7fe      	b.n	8001874 <ADC1_2_IRQHandler>
	...

08001878 <__libc_init_array>:
 8001878:	b570      	push	{r4, r5, r6, lr}
 800187a:	2500      	movs	r5, #0
 800187c:	4e0c      	ldr	r6, [pc, #48]	; (80018b0 <__libc_init_array+0x38>)
 800187e:	4c0d      	ldr	r4, [pc, #52]	; (80018b4 <__libc_init_array+0x3c>)
 8001880:	1ba4      	subs	r4, r4, r6
 8001882:	10a4      	asrs	r4, r4, #2
 8001884:	42a5      	cmp	r5, r4
 8001886:	d109      	bne.n	800189c <__libc_init_array+0x24>
 8001888:	f000 fc7e 	bl	8002188 <_init>
 800188c:	2500      	movs	r5, #0
 800188e:	4e0a      	ldr	r6, [pc, #40]	; (80018b8 <__libc_init_array+0x40>)
 8001890:	4c0a      	ldr	r4, [pc, #40]	; (80018bc <__libc_init_array+0x44>)
 8001892:	1ba4      	subs	r4, r4, r6
 8001894:	10a4      	asrs	r4, r4, #2
 8001896:	42a5      	cmp	r5, r4
 8001898:	d105      	bne.n	80018a6 <__libc_init_array+0x2e>
 800189a:	bd70      	pop	{r4, r5, r6, pc}
 800189c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80018a0:	4798      	blx	r3
 80018a2:	3501      	adds	r5, #1
 80018a4:	e7ee      	b.n	8001884 <__libc_init_array+0xc>
 80018a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80018aa:	4798      	blx	r3
 80018ac:	3501      	adds	r5, #1
 80018ae:	e7f2      	b.n	8001896 <__libc_init_array+0x1e>
 80018b0:	08002460 	.word	0x08002460
 80018b4:	08002460 	.word	0x08002460
 80018b8:	08002460 	.word	0x08002460
 80018bc:	08002464 	.word	0x08002464

080018c0 <sniprintf>:
 80018c0:	b40c      	push	{r2, r3}
 80018c2:	b530      	push	{r4, r5, lr}
 80018c4:	4b17      	ldr	r3, [pc, #92]	; (8001924 <sniprintf+0x64>)
 80018c6:	1e0c      	subs	r4, r1, #0
 80018c8:	b09d      	sub	sp, #116	; 0x74
 80018ca:	681d      	ldr	r5, [r3, #0]
 80018cc:	da08      	bge.n	80018e0 <sniprintf+0x20>
 80018ce:	238b      	movs	r3, #139	; 0x8b
 80018d0:	f04f 30ff 	mov.w	r0, #4294967295
 80018d4:	602b      	str	r3, [r5, #0]
 80018d6:	b01d      	add	sp, #116	; 0x74
 80018d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80018dc:	b002      	add	sp, #8
 80018de:	4770      	bx	lr
 80018e0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80018e4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80018e8:	bf0c      	ite	eq
 80018ea:	4623      	moveq	r3, r4
 80018ec:	f104 33ff 	addne.w	r3, r4, #4294967295
 80018f0:	9304      	str	r3, [sp, #16]
 80018f2:	9307      	str	r3, [sp, #28]
 80018f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018f8:	9002      	str	r0, [sp, #8]
 80018fa:	9006      	str	r0, [sp, #24]
 80018fc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8001900:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8001902:	ab21      	add	r3, sp, #132	; 0x84
 8001904:	a902      	add	r1, sp, #8
 8001906:	4628      	mov	r0, r5
 8001908:	9301      	str	r3, [sp, #4]
 800190a:	f000 f883 	bl	8001a14 <_svfiprintf_r>
 800190e:	1c43      	adds	r3, r0, #1
 8001910:	bfbc      	itt	lt
 8001912:	238b      	movlt	r3, #139	; 0x8b
 8001914:	602b      	strlt	r3, [r5, #0]
 8001916:	2c00      	cmp	r4, #0
 8001918:	d0dd      	beq.n	80018d6 <sniprintf+0x16>
 800191a:	2200      	movs	r2, #0
 800191c:	9b02      	ldr	r3, [sp, #8]
 800191e:	701a      	strb	r2, [r3, #0]
 8001920:	e7d9      	b.n	80018d6 <sniprintf+0x16>
 8001922:	bf00      	nop
 8001924:	2000000c 	.word	0x2000000c

08001928 <strstr>:
 8001928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800192a:	7803      	ldrb	r3, [r0, #0]
 800192c:	b133      	cbz	r3, 800193c <strstr+0x14>
 800192e:	4603      	mov	r3, r0
 8001930:	4618      	mov	r0, r3
 8001932:	1c5e      	adds	r6, r3, #1
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	b933      	cbnz	r3, 8001946 <strstr+0x1e>
 8001938:	4618      	mov	r0, r3
 800193a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800193c:	780b      	ldrb	r3, [r1, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	bf18      	it	ne
 8001942:	2000      	movne	r0, #0
 8001944:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001946:	1e4d      	subs	r5, r1, #1
 8001948:	1e44      	subs	r4, r0, #1
 800194a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800194e:	2a00      	cmp	r2, #0
 8001950:	d0f3      	beq.n	800193a <strstr+0x12>
 8001952:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 8001956:	4633      	mov	r3, r6
 8001958:	4297      	cmp	r7, r2
 800195a:	d0f6      	beq.n	800194a <strstr+0x22>
 800195c:	e7e8      	b.n	8001930 <strstr+0x8>

0800195e <__ssputs_r>:
 800195e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001962:	688e      	ldr	r6, [r1, #8]
 8001964:	4682      	mov	sl, r0
 8001966:	429e      	cmp	r6, r3
 8001968:	460c      	mov	r4, r1
 800196a:	4691      	mov	r9, r2
 800196c:	4698      	mov	r8, r3
 800196e:	d835      	bhi.n	80019dc <__ssputs_r+0x7e>
 8001970:	898a      	ldrh	r2, [r1, #12]
 8001972:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001976:	d031      	beq.n	80019dc <__ssputs_r+0x7e>
 8001978:	2302      	movs	r3, #2
 800197a:	6825      	ldr	r5, [r4, #0]
 800197c:	6909      	ldr	r1, [r1, #16]
 800197e:	1a6f      	subs	r7, r5, r1
 8001980:	6965      	ldr	r5, [r4, #20]
 8001982:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001986:	fb95 f5f3 	sdiv	r5, r5, r3
 800198a:	f108 0301 	add.w	r3, r8, #1
 800198e:	443b      	add	r3, r7
 8001990:	429d      	cmp	r5, r3
 8001992:	bf38      	it	cc
 8001994:	461d      	movcc	r5, r3
 8001996:	0553      	lsls	r3, r2, #21
 8001998:	d531      	bpl.n	80019fe <__ssputs_r+0xa0>
 800199a:	4629      	mov	r1, r5
 800199c:	f000 fb46 	bl	800202c <_malloc_r>
 80019a0:	4606      	mov	r6, r0
 80019a2:	b950      	cbnz	r0, 80019ba <__ssputs_r+0x5c>
 80019a4:	230c      	movs	r3, #12
 80019a6:	f8ca 3000 	str.w	r3, [sl]
 80019aa:	89a3      	ldrh	r3, [r4, #12]
 80019ac:	f04f 30ff 	mov.w	r0, #4294967295
 80019b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019b4:	81a3      	strh	r3, [r4, #12]
 80019b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019ba:	463a      	mov	r2, r7
 80019bc:	6921      	ldr	r1, [r4, #16]
 80019be:	f000 fac3 	bl	8001f48 <memcpy>
 80019c2:	89a3      	ldrh	r3, [r4, #12]
 80019c4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80019c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019cc:	81a3      	strh	r3, [r4, #12]
 80019ce:	6126      	str	r6, [r4, #16]
 80019d0:	443e      	add	r6, r7
 80019d2:	6026      	str	r6, [r4, #0]
 80019d4:	4646      	mov	r6, r8
 80019d6:	6165      	str	r5, [r4, #20]
 80019d8:	1bed      	subs	r5, r5, r7
 80019da:	60a5      	str	r5, [r4, #8]
 80019dc:	4546      	cmp	r6, r8
 80019de:	bf28      	it	cs
 80019e0:	4646      	movcs	r6, r8
 80019e2:	4649      	mov	r1, r9
 80019e4:	4632      	mov	r2, r6
 80019e6:	6820      	ldr	r0, [r4, #0]
 80019e8:	f000 fab9 	bl	8001f5e <memmove>
 80019ec:	68a3      	ldr	r3, [r4, #8]
 80019ee:	2000      	movs	r0, #0
 80019f0:	1b9b      	subs	r3, r3, r6
 80019f2:	60a3      	str	r3, [r4, #8]
 80019f4:	6823      	ldr	r3, [r4, #0]
 80019f6:	441e      	add	r6, r3
 80019f8:	6026      	str	r6, [r4, #0]
 80019fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019fe:	462a      	mov	r2, r5
 8001a00:	f000 fb72 	bl	80020e8 <_realloc_r>
 8001a04:	4606      	mov	r6, r0
 8001a06:	2800      	cmp	r0, #0
 8001a08:	d1e1      	bne.n	80019ce <__ssputs_r+0x70>
 8001a0a:	6921      	ldr	r1, [r4, #16]
 8001a0c:	4650      	mov	r0, sl
 8001a0e:	f000 fac1 	bl	8001f94 <_free_r>
 8001a12:	e7c7      	b.n	80019a4 <__ssputs_r+0x46>

08001a14 <_svfiprintf_r>:
 8001a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a18:	b09d      	sub	sp, #116	; 0x74
 8001a1a:	9303      	str	r3, [sp, #12]
 8001a1c:	898b      	ldrh	r3, [r1, #12]
 8001a1e:	4680      	mov	r8, r0
 8001a20:	061c      	lsls	r4, r3, #24
 8001a22:	460d      	mov	r5, r1
 8001a24:	4616      	mov	r6, r2
 8001a26:	d50f      	bpl.n	8001a48 <_svfiprintf_r+0x34>
 8001a28:	690b      	ldr	r3, [r1, #16]
 8001a2a:	b96b      	cbnz	r3, 8001a48 <_svfiprintf_r+0x34>
 8001a2c:	2140      	movs	r1, #64	; 0x40
 8001a2e:	f000 fafd 	bl	800202c <_malloc_r>
 8001a32:	6028      	str	r0, [r5, #0]
 8001a34:	6128      	str	r0, [r5, #16]
 8001a36:	b928      	cbnz	r0, 8001a44 <_svfiprintf_r+0x30>
 8001a38:	230c      	movs	r3, #12
 8001a3a:	f8c8 3000 	str.w	r3, [r8]
 8001a3e:	f04f 30ff 	mov.w	r0, #4294967295
 8001a42:	e0c4      	b.n	8001bce <_svfiprintf_r+0x1ba>
 8001a44:	2340      	movs	r3, #64	; 0x40
 8001a46:	616b      	str	r3, [r5, #20]
 8001a48:	2300      	movs	r3, #0
 8001a4a:	9309      	str	r3, [sp, #36]	; 0x24
 8001a4c:	2320      	movs	r3, #32
 8001a4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001a52:	2330      	movs	r3, #48	; 0x30
 8001a54:	f04f 0b01 	mov.w	fp, #1
 8001a58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001a5c:	4637      	mov	r7, r6
 8001a5e:	463c      	mov	r4, r7
 8001a60:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d13c      	bne.n	8001ae2 <_svfiprintf_r+0xce>
 8001a68:	ebb7 0a06 	subs.w	sl, r7, r6
 8001a6c:	d00b      	beq.n	8001a86 <_svfiprintf_r+0x72>
 8001a6e:	4653      	mov	r3, sl
 8001a70:	4632      	mov	r2, r6
 8001a72:	4629      	mov	r1, r5
 8001a74:	4640      	mov	r0, r8
 8001a76:	f7ff ff72 	bl	800195e <__ssputs_r>
 8001a7a:	3001      	adds	r0, #1
 8001a7c:	f000 80a2 	beq.w	8001bc4 <_svfiprintf_r+0x1b0>
 8001a80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001a82:	4453      	add	r3, sl
 8001a84:	9309      	str	r3, [sp, #36]	; 0x24
 8001a86:	783b      	ldrb	r3, [r7, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	f000 809b 	beq.w	8001bc4 <_svfiprintf_r+0x1b0>
 8001a8e:	2300      	movs	r3, #0
 8001a90:	f04f 32ff 	mov.w	r2, #4294967295
 8001a94:	9304      	str	r3, [sp, #16]
 8001a96:	9307      	str	r3, [sp, #28]
 8001a98:	9205      	str	r2, [sp, #20]
 8001a9a:	9306      	str	r3, [sp, #24]
 8001a9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001aa0:	931a      	str	r3, [sp, #104]	; 0x68
 8001aa2:	2205      	movs	r2, #5
 8001aa4:	7821      	ldrb	r1, [r4, #0]
 8001aa6:	4850      	ldr	r0, [pc, #320]	; (8001be8 <_svfiprintf_r+0x1d4>)
 8001aa8:	f000 fa40 	bl	8001f2c <memchr>
 8001aac:	1c67      	adds	r7, r4, #1
 8001aae:	9b04      	ldr	r3, [sp, #16]
 8001ab0:	b9d8      	cbnz	r0, 8001aea <_svfiprintf_r+0xd6>
 8001ab2:	06d9      	lsls	r1, r3, #27
 8001ab4:	bf44      	itt	mi
 8001ab6:	2220      	movmi	r2, #32
 8001ab8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001abc:	071a      	lsls	r2, r3, #28
 8001abe:	bf44      	itt	mi
 8001ac0:	222b      	movmi	r2, #43	; 0x2b
 8001ac2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001ac6:	7822      	ldrb	r2, [r4, #0]
 8001ac8:	2a2a      	cmp	r2, #42	; 0x2a
 8001aca:	d016      	beq.n	8001afa <_svfiprintf_r+0xe6>
 8001acc:	2100      	movs	r1, #0
 8001ace:	200a      	movs	r0, #10
 8001ad0:	9a07      	ldr	r2, [sp, #28]
 8001ad2:	4627      	mov	r7, r4
 8001ad4:	783b      	ldrb	r3, [r7, #0]
 8001ad6:	3401      	adds	r4, #1
 8001ad8:	3b30      	subs	r3, #48	; 0x30
 8001ada:	2b09      	cmp	r3, #9
 8001adc:	d950      	bls.n	8001b80 <_svfiprintf_r+0x16c>
 8001ade:	b1c9      	cbz	r1, 8001b14 <_svfiprintf_r+0x100>
 8001ae0:	e011      	b.n	8001b06 <_svfiprintf_r+0xf2>
 8001ae2:	2b25      	cmp	r3, #37	; 0x25
 8001ae4:	d0c0      	beq.n	8001a68 <_svfiprintf_r+0x54>
 8001ae6:	4627      	mov	r7, r4
 8001ae8:	e7b9      	b.n	8001a5e <_svfiprintf_r+0x4a>
 8001aea:	4a3f      	ldr	r2, [pc, #252]	; (8001be8 <_svfiprintf_r+0x1d4>)
 8001aec:	463c      	mov	r4, r7
 8001aee:	1a80      	subs	r0, r0, r2
 8001af0:	fa0b f000 	lsl.w	r0, fp, r0
 8001af4:	4318      	orrs	r0, r3
 8001af6:	9004      	str	r0, [sp, #16]
 8001af8:	e7d3      	b.n	8001aa2 <_svfiprintf_r+0x8e>
 8001afa:	9a03      	ldr	r2, [sp, #12]
 8001afc:	1d11      	adds	r1, r2, #4
 8001afe:	6812      	ldr	r2, [r2, #0]
 8001b00:	9103      	str	r1, [sp, #12]
 8001b02:	2a00      	cmp	r2, #0
 8001b04:	db01      	blt.n	8001b0a <_svfiprintf_r+0xf6>
 8001b06:	9207      	str	r2, [sp, #28]
 8001b08:	e004      	b.n	8001b14 <_svfiprintf_r+0x100>
 8001b0a:	4252      	negs	r2, r2
 8001b0c:	f043 0302 	orr.w	r3, r3, #2
 8001b10:	9207      	str	r2, [sp, #28]
 8001b12:	9304      	str	r3, [sp, #16]
 8001b14:	783b      	ldrb	r3, [r7, #0]
 8001b16:	2b2e      	cmp	r3, #46	; 0x2e
 8001b18:	d10d      	bne.n	8001b36 <_svfiprintf_r+0x122>
 8001b1a:	787b      	ldrb	r3, [r7, #1]
 8001b1c:	1c79      	adds	r1, r7, #1
 8001b1e:	2b2a      	cmp	r3, #42	; 0x2a
 8001b20:	d132      	bne.n	8001b88 <_svfiprintf_r+0x174>
 8001b22:	9b03      	ldr	r3, [sp, #12]
 8001b24:	3702      	adds	r7, #2
 8001b26:	1d1a      	adds	r2, r3, #4
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	9203      	str	r2, [sp, #12]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	bfb8      	it	lt
 8001b30:	f04f 33ff 	movlt.w	r3, #4294967295
 8001b34:	9305      	str	r3, [sp, #20]
 8001b36:	4c2d      	ldr	r4, [pc, #180]	; (8001bec <_svfiprintf_r+0x1d8>)
 8001b38:	2203      	movs	r2, #3
 8001b3a:	7839      	ldrb	r1, [r7, #0]
 8001b3c:	4620      	mov	r0, r4
 8001b3e:	f000 f9f5 	bl	8001f2c <memchr>
 8001b42:	b138      	cbz	r0, 8001b54 <_svfiprintf_r+0x140>
 8001b44:	2340      	movs	r3, #64	; 0x40
 8001b46:	1b00      	subs	r0, r0, r4
 8001b48:	fa03 f000 	lsl.w	r0, r3, r0
 8001b4c:	9b04      	ldr	r3, [sp, #16]
 8001b4e:	3701      	adds	r7, #1
 8001b50:	4303      	orrs	r3, r0
 8001b52:	9304      	str	r3, [sp, #16]
 8001b54:	7839      	ldrb	r1, [r7, #0]
 8001b56:	2206      	movs	r2, #6
 8001b58:	4825      	ldr	r0, [pc, #148]	; (8001bf0 <_svfiprintf_r+0x1dc>)
 8001b5a:	1c7e      	adds	r6, r7, #1
 8001b5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001b60:	f000 f9e4 	bl	8001f2c <memchr>
 8001b64:	2800      	cmp	r0, #0
 8001b66:	d035      	beq.n	8001bd4 <_svfiprintf_r+0x1c0>
 8001b68:	4b22      	ldr	r3, [pc, #136]	; (8001bf4 <_svfiprintf_r+0x1e0>)
 8001b6a:	b9fb      	cbnz	r3, 8001bac <_svfiprintf_r+0x198>
 8001b6c:	9b03      	ldr	r3, [sp, #12]
 8001b6e:	3307      	adds	r3, #7
 8001b70:	f023 0307 	bic.w	r3, r3, #7
 8001b74:	3308      	adds	r3, #8
 8001b76:	9303      	str	r3, [sp, #12]
 8001b78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001b7a:	444b      	add	r3, r9
 8001b7c:	9309      	str	r3, [sp, #36]	; 0x24
 8001b7e:	e76d      	b.n	8001a5c <_svfiprintf_r+0x48>
 8001b80:	fb00 3202 	mla	r2, r0, r2, r3
 8001b84:	2101      	movs	r1, #1
 8001b86:	e7a4      	b.n	8001ad2 <_svfiprintf_r+0xbe>
 8001b88:	2300      	movs	r3, #0
 8001b8a:	240a      	movs	r4, #10
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	9305      	str	r3, [sp, #20]
 8001b90:	460f      	mov	r7, r1
 8001b92:	783a      	ldrb	r2, [r7, #0]
 8001b94:	3101      	adds	r1, #1
 8001b96:	3a30      	subs	r2, #48	; 0x30
 8001b98:	2a09      	cmp	r2, #9
 8001b9a:	d903      	bls.n	8001ba4 <_svfiprintf_r+0x190>
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d0ca      	beq.n	8001b36 <_svfiprintf_r+0x122>
 8001ba0:	9005      	str	r0, [sp, #20]
 8001ba2:	e7c8      	b.n	8001b36 <_svfiprintf_r+0x122>
 8001ba4:	fb04 2000 	mla	r0, r4, r0, r2
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e7f1      	b.n	8001b90 <_svfiprintf_r+0x17c>
 8001bac:	ab03      	add	r3, sp, #12
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	462a      	mov	r2, r5
 8001bb2:	4b11      	ldr	r3, [pc, #68]	; (8001bf8 <_svfiprintf_r+0x1e4>)
 8001bb4:	a904      	add	r1, sp, #16
 8001bb6:	4640      	mov	r0, r8
 8001bb8:	f3af 8000 	nop.w
 8001bbc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001bc0:	4681      	mov	r9, r0
 8001bc2:	d1d9      	bne.n	8001b78 <_svfiprintf_r+0x164>
 8001bc4:	89ab      	ldrh	r3, [r5, #12]
 8001bc6:	065b      	lsls	r3, r3, #25
 8001bc8:	f53f af39 	bmi.w	8001a3e <_svfiprintf_r+0x2a>
 8001bcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001bce:	b01d      	add	sp, #116	; 0x74
 8001bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001bd4:	ab03      	add	r3, sp, #12
 8001bd6:	9300      	str	r3, [sp, #0]
 8001bd8:	462a      	mov	r2, r5
 8001bda:	4b07      	ldr	r3, [pc, #28]	; (8001bf8 <_svfiprintf_r+0x1e4>)
 8001bdc:	a904      	add	r1, sp, #16
 8001bde:	4640      	mov	r0, r8
 8001be0:	f000 f884 	bl	8001cec <_printf_i>
 8001be4:	e7ea      	b.n	8001bbc <_svfiprintf_r+0x1a8>
 8001be6:	bf00      	nop
 8001be8:	0800242a 	.word	0x0800242a
 8001bec:	08002430 	.word	0x08002430
 8001bf0:	08002434 	.word	0x08002434
 8001bf4:	00000000 	.word	0x00000000
 8001bf8:	0800195f 	.word	0x0800195f

08001bfc <_printf_common>:
 8001bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c00:	4691      	mov	r9, r2
 8001c02:	461f      	mov	r7, r3
 8001c04:	688a      	ldr	r2, [r1, #8]
 8001c06:	690b      	ldr	r3, [r1, #16]
 8001c08:	4606      	mov	r6, r0
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	bfb8      	it	lt
 8001c0e:	4613      	movlt	r3, r2
 8001c10:	f8c9 3000 	str.w	r3, [r9]
 8001c14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001c18:	460c      	mov	r4, r1
 8001c1a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001c1e:	b112      	cbz	r2, 8001c26 <_printf_common+0x2a>
 8001c20:	3301      	adds	r3, #1
 8001c22:	f8c9 3000 	str.w	r3, [r9]
 8001c26:	6823      	ldr	r3, [r4, #0]
 8001c28:	0699      	lsls	r1, r3, #26
 8001c2a:	bf42      	ittt	mi
 8001c2c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001c30:	3302      	addmi	r3, #2
 8001c32:	f8c9 3000 	strmi.w	r3, [r9]
 8001c36:	6825      	ldr	r5, [r4, #0]
 8001c38:	f015 0506 	ands.w	r5, r5, #6
 8001c3c:	d107      	bne.n	8001c4e <_printf_common+0x52>
 8001c3e:	f104 0a19 	add.w	sl, r4, #25
 8001c42:	68e3      	ldr	r3, [r4, #12]
 8001c44:	f8d9 2000 	ldr.w	r2, [r9]
 8001c48:	1a9b      	subs	r3, r3, r2
 8001c4a:	429d      	cmp	r5, r3
 8001c4c:	db2a      	blt.n	8001ca4 <_printf_common+0xa8>
 8001c4e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001c52:	6822      	ldr	r2, [r4, #0]
 8001c54:	3300      	adds	r3, #0
 8001c56:	bf18      	it	ne
 8001c58:	2301      	movne	r3, #1
 8001c5a:	0692      	lsls	r2, r2, #26
 8001c5c:	d42f      	bmi.n	8001cbe <_printf_common+0xc2>
 8001c5e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001c62:	4639      	mov	r1, r7
 8001c64:	4630      	mov	r0, r6
 8001c66:	47c0      	blx	r8
 8001c68:	3001      	adds	r0, #1
 8001c6a:	d022      	beq.n	8001cb2 <_printf_common+0xb6>
 8001c6c:	6823      	ldr	r3, [r4, #0]
 8001c6e:	68e5      	ldr	r5, [r4, #12]
 8001c70:	f003 0306 	and.w	r3, r3, #6
 8001c74:	2b04      	cmp	r3, #4
 8001c76:	bf18      	it	ne
 8001c78:	2500      	movne	r5, #0
 8001c7a:	f8d9 2000 	ldr.w	r2, [r9]
 8001c7e:	f04f 0900 	mov.w	r9, #0
 8001c82:	bf08      	it	eq
 8001c84:	1aad      	subeq	r5, r5, r2
 8001c86:	68a3      	ldr	r3, [r4, #8]
 8001c88:	6922      	ldr	r2, [r4, #16]
 8001c8a:	bf08      	it	eq
 8001c8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001c90:	4293      	cmp	r3, r2
 8001c92:	bfc4      	itt	gt
 8001c94:	1a9b      	subgt	r3, r3, r2
 8001c96:	18ed      	addgt	r5, r5, r3
 8001c98:	341a      	adds	r4, #26
 8001c9a:	454d      	cmp	r5, r9
 8001c9c:	d11b      	bne.n	8001cd6 <_printf_common+0xda>
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	4652      	mov	r2, sl
 8001ca8:	4639      	mov	r1, r7
 8001caa:	4630      	mov	r0, r6
 8001cac:	47c0      	blx	r8
 8001cae:	3001      	adds	r0, #1
 8001cb0:	d103      	bne.n	8001cba <_printf_common+0xbe>
 8001cb2:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001cba:	3501      	adds	r5, #1
 8001cbc:	e7c1      	b.n	8001c42 <_printf_common+0x46>
 8001cbe:	2030      	movs	r0, #48	; 0x30
 8001cc0:	18e1      	adds	r1, r4, r3
 8001cc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001cc6:	1c5a      	adds	r2, r3, #1
 8001cc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001ccc:	4422      	add	r2, r4
 8001cce:	3302      	adds	r3, #2
 8001cd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001cd4:	e7c3      	b.n	8001c5e <_printf_common+0x62>
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	4622      	mov	r2, r4
 8001cda:	4639      	mov	r1, r7
 8001cdc:	4630      	mov	r0, r6
 8001cde:	47c0      	blx	r8
 8001ce0:	3001      	adds	r0, #1
 8001ce2:	d0e6      	beq.n	8001cb2 <_printf_common+0xb6>
 8001ce4:	f109 0901 	add.w	r9, r9, #1
 8001ce8:	e7d7      	b.n	8001c9a <_printf_common+0x9e>
	...

08001cec <_printf_i>:
 8001cec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001cf0:	4617      	mov	r7, r2
 8001cf2:	7e0a      	ldrb	r2, [r1, #24]
 8001cf4:	b085      	sub	sp, #20
 8001cf6:	2a6e      	cmp	r2, #110	; 0x6e
 8001cf8:	4698      	mov	r8, r3
 8001cfa:	4606      	mov	r6, r0
 8001cfc:	460c      	mov	r4, r1
 8001cfe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001d00:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8001d04:	f000 80bc 	beq.w	8001e80 <_printf_i+0x194>
 8001d08:	d81a      	bhi.n	8001d40 <_printf_i+0x54>
 8001d0a:	2a63      	cmp	r2, #99	; 0x63
 8001d0c:	d02e      	beq.n	8001d6c <_printf_i+0x80>
 8001d0e:	d80a      	bhi.n	8001d26 <_printf_i+0x3a>
 8001d10:	2a00      	cmp	r2, #0
 8001d12:	f000 80c8 	beq.w	8001ea6 <_printf_i+0x1ba>
 8001d16:	2a58      	cmp	r2, #88	; 0x58
 8001d18:	f000 808a 	beq.w	8001e30 <_printf_i+0x144>
 8001d1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001d20:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8001d24:	e02a      	b.n	8001d7c <_printf_i+0x90>
 8001d26:	2a64      	cmp	r2, #100	; 0x64
 8001d28:	d001      	beq.n	8001d2e <_printf_i+0x42>
 8001d2a:	2a69      	cmp	r2, #105	; 0x69
 8001d2c:	d1f6      	bne.n	8001d1c <_printf_i+0x30>
 8001d2e:	6821      	ldr	r1, [r4, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001d36:	d023      	beq.n	8001d80 <_printf_i+0x94>
 8001d38:	1d11      	adds	r1, r2, #4
 8001d3a:	6019      	str	r1, [r3, #0]
 8001d3c:	6813      	ldr	r3, [r2, #0]
 8001d3e:	e027      	b.n	8001d90 <_printf_i+0xa4>
 8001d40:	2a73      	cmp	r2, #115	; 0x73
 8001d42:	f000 80b4 	beq.w	8001eae <_printf_i+0x1c2>
 8001d46:	d808      	bhi.n	8001d5a <_printf_i+0x6e>
 8001d48:	2a6f      	cmp	r2, #111	; 0x6f
 8001d4a:	d02a      	beq.n	8001da2 <_printf_i+0xb6>
 8001d4c:	2a70      	cmp	r2, #112	; 0x70
 8001d4e:	d1e5      	bne.n	8001d1c <_printf_i+0x30>
 8001d50:	680a      	ldr	r2, [r1, #0]
 8001d52:	f042 0220 	orr.w	r2, r2, #32
 8001d56:	600a      	str	r2, [r1, #0]
 8001d58:	e003      	b.n	8001d62 <_printf_i+0x76>
 8001d5a:	2a75      	cmp	r2, #117	; 0x75
 8001d5c:	d021      	beq.n	8001da2 <_printf_i+0xb6>
 8001d5e:	2a78      	cmp	r2, #120	; 0x78
 8001d60:	d1dc      	bne.n	8001d1c <_printf_i+0x30>
 8001d62:	2278      	movs	r2, #120	; 0x78
 8001d64:	496f      	ldr	r1, [pc, #444]	; (8001f24 <_printf_i+0x238>)
 8001d66:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8001d6a:	e064      	b.n	8001e36 <_printf_i+0x14a>
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8001d72:	1d11      	adds	r1, r2, #4
 8001d74:	6019      	str	r1, [r3, #0]
 8001d76:	6813      	ldr	r3, [r2, #0]
 8001d78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e0a3      	b.n	8001ec8 <_printf_i+0x1dc>
 8001d80:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001d84:	f102 0104 	add.w	r1, r2, #4
 8001d88:	6019      	str	r1, [r3, #0]
 8001d8a:	d0d7      	beq.n	8001d3c <_printf_i+0x50>
 8001d8c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	da03      	bge.n	8001d9c <_printf_i+0xb0>
 8001d94:	222d      	movs	r2, #45	; 0x2d
 8001d96:	425b      	negs	r3, r3
 8001d98:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001d9c:	4962      	ldr	r1, [pc, #392]	; (8001f28 <_printf_i+0x23c>)
 8001d9e:	220a      	movs	r2, #10
 8001da0:	e017      	b.n	8001dd2 <_printf_i+0xe6>
 8001da2:	6820      	ldr	r0, [r4, #0]
 8001da4:	6819      	ldr	r1, [r3, #0]
 8001da6:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001daa:	d003      	beq.n	8001db4 <_printf_i+0xc8>
 8001dac:	1d08      	adds	r0, r1, #4
 8001dae:	6018      	str	r0, [r3, #0]
 8001db0:	680b      	ldr	r3, [r1, #0]
 8001db2:	e006      	b.n	8001dc2 <_printf_i+0xd6>
 8001db4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001db8:	f101 0004 	add.w	r0, r1, #4
 8001dbc:	6018      	str	r0, [r3, #0]
 8001dbe:	d0f7      	beq.n	8001db0 <_printf_i+0xc4>
 8001dc0:	880b      	ldrh	r3, [r1, #0]
 8001dc2:	2a6f      	cmp	r2, #111	; 0x6f
 8001dc4:	bf14      	ite	ne
 8001dc6:	220a      	movne	r2, #10
 8001dc8:	2208      	moveq	r2, #8
 8001dca:	4957      	ldr	r1, [pc, #348]	; (8001f28 <_printf_i+0x23c>)
 8001dcc:	2000      	movs	r0, #0
 8001dce:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8001dd2:	6865      	ldr	r5, [r4, #4]
 8001dd4:	2d00      	cmp	r5, #0
 8001dd6:	60a5      	str	r5, [r4, #8]
 8001dd8:	f2c0 809c 	blt.w	8001f14 <_printf_i+0x228>
 8001ddc:	6820      	ldr	r0, [r4, #0]
 8001dde:	f020 0004 	bic.w	r0, r0, #4
 8001de2:	6020      	str	r0, [r4, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d13f      	bne.n	8001e68 <_printf_i+0x17c>
 8001de8:	2d00      	cmp	r5, #0
 8001dea:	f040 8095 	bne.w	8001f18 <_printf_i+0x22c>
 8001dee:	4675      	mov	r5, lr
 8001df0:	2a08      	cmp	r2, #8
 8001df2:	d10b      	bne.n	8001e0c <_printf_i+0x120>
 8001df4:	6823      	ldr	r3, [r4, #0]
 8001df6:	07da      	lsls	r2, r3, #31
 8001df8:	d508      	bpl.n	8001e0c <_printf_i+0x120>
 8001dfa:	6923      	ldr	r3, [r4, #16]
 8001dfc:	6862      	ldr	r2, [r4, #4]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	bfde      	ittt	le
 8001e02:	2330      	movle	r3, #48	; 0x30
 8001e04:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001e08:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001e0c:	ebae 0305 	sub.w	r3, lr, r5
 8001e10:	6123      	str	r3, [r4, #16]
 8001e12:	f8cd 8000 	str.w	r8, [sp]
 8001e16:	463b      	mov	r3, r7
 8001e18:	aa03      	add	r2, sp, #12
 8001e1a:	4621      	mov	r1, r4
 8001e1c:	4630      	mov	r0, r6
 8001e1e:	f7ff feed 	bl	8001bfc <_printf_common>
 8001e22:	3001      	adds	r0, #1
 8001e24:	d155      	bne.n	8001ed2 <_printf_i+0x1e6>
 8001e26:	f04f 30ff 	mov.w	r0, #4294967295
 8001e2a:	b005      	add	sp, #20
 8001e2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001e30:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8001e34:	493c      	ldr	r1, [pc, #240]	; (8001f28 <_printf_i+0x23c>)
 8001e36:	6822      	ldr	r2, [r4, #0]
 8001e38:	6818      	ldr	r0, [r3, #0]
 8001e3a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001e3e:	f100 0504 	add.w	r5, r0, #4
 8001e42:	601d      	str	r5, [r3, #0]
 8001e44:	d001      	beq.n	8001e4a <_printf_i+0x15e>
 8001e46:	6803      	ldr	r3, [r0, #0]
 8001e48:	e002      	b.n	8001e50 <_printf_i+0x164>
 8001e4a:	0655      	lsls	r5, r2, #25
 8001e4c:	d5fb      	bpl.n	8001e46 <_printf_i+0x15a>
 8001e4e:	8803      	ldrh	r3, [r0, #0]
 8001e50:	07d0      	lsls	r0, r2, #31
 8001e52:	bf44      	itt	mi
 8001e54:	f042 0220 	orrmi.w	r2, r2, #32
 8001e58:	6022      	strmi	r2, [r4, #0]
 8001e5a:	b91b      	cbnz	r3, 8001e64 <_printf_i+0x178>
 8001e5c:	6822      	ldr	r2, [r4, #0]
 8001e5e:	f022 0220 	bic.w	r2, r2, #32
 8001e62:	6022      	str	r2, [r4, #0]
 8001e64:	2210      	movs	r2, #16
 8001e66:	e7b1      	b.n	8001dcc <_printf_i+0xe0>
 8001e68:	4675      	mov	r5, lr
 8001e6a:	fbb3 f0f2 	udiv	r0, r3, r2
 8001e6e:	fb02 3310 	mls	r3, r2, r0, r3
 8001e72:	5ccb      	ldrb	r3, [r1, r3]
 8001e74:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2800      	cmp	r0, #0
 8001e7c:	d1f5      	bne.n	8001e6a <_printf_i+0x17e>
 8001e7e:	e7b7      	b.n	8001df0 <_printf_i+0x104>
 8001e80:	6808      	ldr	r0, [r1, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001e88:	6949      	ldr	r1, [r1, #20]
 8001e8a:	d004      	beq.n	8001e96 <_printf_i+0x1aa>
 8001e8c:	1d10      	adds	r0, r2, #4
 8001e8e:	6018      	str	r0, [r3, #0]
 8001e90:	6813      	ldr	r3, [r2, #0]
 8001e92:	6019      	str	r1, [r3, #0]
 8001e94:	e007      	b.n	8001ea6 <_printf_i+0x1ba>
 8001e96:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001e9a:	f102 0004 	add.w	r0, r2, #4
 8001e9e:	6018      	str	r0, [r3, #0]
 8001ea0:	6813      	ldr	r3, [r2, #0]
 8001ea2:	d0f6      	beq.n	8001e92 <_printf_i+0x1a6>
 8001ea4:	8019      	strh	r1, [r3, #0]
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	4675      	mov	r5, lr
 8001eaa:	6123      	str	r3, [r4, #16]
 8001eac:	e7b1      	b.n	8001e12 <_printf_i+0x126>
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	1d11      	adds	r1, r2, #4
 8001eb2:	6019      	str	r1, [r3, #0]
 8001eb4:	6815      	ldr	r5, [r2, #0]
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	6862      	ldr	r2, [r4, #4]
 8001eba:	4628      	mov	r0, r5
 8001ebc:	f000 f836 	bl	8001f2c <memchr>
 8001ec0:	b108      	cbz	r0, 8001ec6 <_printf_i+0x1da>
 8001ec2:	1b40      	subs	r0, r0, r5
 8001ec4:	6060      	str	r0, [r4, #4]
 8001ec6:	6863      	ldr	r3, [r4, #4]
 8001ec8:	6123      	str	r3, [r4, #16]
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001ed0:	e79f      	b.n	8001e12 <_printf_i+0x126>
 8001ed2:	6923      	ldr	r3, [r4, #16]
 8001ed4:	462a      	mov	r2, r5
 8001ed6:	4639      	mov	r1, r7
 8001ed8:	4630      	mov	r0, r6
 8001eda:	47c0      	blx	r8
 8001edc:	3001      	adds	r0, #1
 8001ede:	d0a2      	beq.n	8001e26 <_printf_i+0x13a>
 8001ee0:	6823      	ldr	r3, [r4, #0]
 8001ee2:	079b      	lsls	r3, r3, #30
 8001ee4:	d507      	bpl.n	8001ef6 <_printf_i+0x20a>
 8001ee6:	2500      	movs	r5, #0
 8001ee8:	f104 0919 	add.w	r9, r4, #25
 8001eec:	68e3      	ldr	r3, [r4, #12]
 8001eee:	9a03      	ldr	r2, [sp, #12]
 8001ef0:	1a9b      	subs	r3, r3, r2
 8001ef2:	429d      	cmp	r5, r3
 8001ef4:	db05      	blt.n	8001f02 <_printf_i+0x216>
 8001ef6:	68e0      	ldr	r0, [r4, #12]
 8001ef8:	9b03      	ldr	r3, [sp, #12]
 8001efa:	4298      	cmp	r0, r3
 8001efc:	bfb8      	it	lt
 8001efe:	4618      	movlt	r0, r3
 8001f00:	e793      	b.n	8001e2a <_printf_i+0x13e>
 8001f02:	2301      	movs	r3, #1
 8001f04:	464a      	mov	r2, r9
 8001f06:	4639      	mov	r1, r7
 8001f08:	4630      	mov	r0, r6
 8001f0a:	47c0      	blx	r8
 8001f0c:	3001      	adds	r0, #1
 8001f0e:	d08a      	beq.n	8001e26 <_printf_i+0x13a>
 8001f10:	3501      	adds	r5, #1
 8001f12:	e7eb      	b.n	8001eec <_printf_i+0x200>
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d1a7      	bne.n	8001e68 <_printf_i+0x17c>
 8001f18:	780b      	ldrb	r3, [r1, #0]
 8001f1a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001f1e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001f22:	e765      	b.n	8001df0 <_printf_i+0x104>
 8001f24:	0800244c 	.word	0x0800244c
 8001f28:	0800243b 	.word	0x0800243b

08001f2c <memchr>:
 8001f2c:	b510      	push	{r4, lr}
 8001f2e:	b2c9      	uxtb	r1, r1
 8001f30:	4402      	add	r2, r0
 8001f32:	4290      	cmp	r0, r2
 8001f34:	4603      	mov	r3, r0
 8001f36:	d101      	bne.n	8001f3c <memchr+0x10>
 8001f38:	2000      	movs	r0, #0
 8001f3a:	bd10      	pop	{r4, pc}
 8001f3c:	781c      	ldrb	r4, [r3, #0]
 8001f3e:	3001      	adds	r0, #1
 8001f40:	428c      	cmp	r4, r1
 8001f42:	d1f6      	bne.n	8001f32 <memchr+0x6>
 8001f44:	4618      	mov	r0, r3
 8001f46:	bd10      	pop	{r4, pc}

08001f48 <memcpy>:
 8001f48:	b510      	push	{r4, lr}
 8001f4a:	1e43      	subs	r3, r0, #1
 8001f4c:	440a      	add	r2, r1
 8001f4e:	4291      	cmp	r1, r2
 8001f50:	d100      	bne.n	8001f54 <memcpy+0xc>
 8001f52:	bd10      	pop	{r4, pc}
 8001f54:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001f58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001f5c:	e7f7      	b.n	8001f4e <memcpy+0x6>

08001f5e <memmove>:
 8001f5e:	4288      	cmp	r0, r1
 8001f60:	b510      	push	{r4, lr}
 8001f62:	eb01 0302 	add.w	r3, r1, r2
 8001f66:	d803      	bhi.n	8001f70 <memmove+0x12>
 8001f68:	1e42      	subs	r2, r0, #1
 8001f6a:	4299      	cmp	r1, r3
 8001f6c:	d10c      	bne.n	8001f88 <memmove+0x2a>
 8001f6e:	bd10      	pop	{r4, pc}
 8001f70:	4298      	cmp	r0, r3
 8001f72:	d2f9      	bcs.n	8001f68 <memmove+0xa>
 8001f74:	1881      	adds	r1, r0, r2
 8001f76:	1ad2      	subs	r2, r2, r3
 8001f78:	42d3      	cmn	r3, r2
 8001f7a:	d100      	bne.n	8001f7e <memmove+0x20>
 8001f7c:	bd10      	pop	{r4, pc}
 8001f7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001f82:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8001f86:	e7f7      	b.n	8001f78 <memmove+0x1a>
 8001f88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001f8c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8001f90:	e7eb      	b.n	8001f6a <memmove+0xc>
	...

08001f94 <_free_r>:
 8001f94:	b538      	push	{r3, r4, r5, lr}
 8001f96:	4605      	mov	r5, r0
 8001f98:	2900      	cmp	r1, #0
 8001f9a:	d043      	beq.n	8002024 <_free_r+0x90>
 8001f9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001fa0:	1f0c      	subs	r4, r1, #4
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	bfb8      	it	lt
 8001fa6:	18e4      	addlt	r4, r4, r3
 8001fa8:	f000 f8d4 	bl	8002154 <__malloc_lock>
 8001fac:	4a1e      	ldr	r2, [pc, #120]	; (8002028 <_free_r+0x94>)
 8001fae:	6813      	ldr	r3, [r2, #0]
 8001fb0:	4610      	mov	r0, r2
 8001fb2:	b933      	cbnz	r3, 8001fc2 <_free_r+0x2e>
 8001fb4:	6063      	str	r3, [r4, #4]
 8001fb6:	6014      	str	r4, [r2, #0]
 8001fb8:	4628      	mov	r0, r5
 8001fba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001fbe:	f000 b8ca 	b.w	8002156 <__malloc_unlock>
 8001fc2:	42a3      	cmp	r3, r4
 8001fc4:	d90b      	bls.n	8001fde <_free_r+0x4a>
 8001fc6:	6821      	ldr	r1, [r4, #0]
 8001fc8:	1862      	adds	r2, r4, r1
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	bf01      	itttt	eq
 8001fce:	681a      	ldreq	r2, [r3, #0]
 8001fd0:	685b      	ldreq	r3, [r3, #4]
 8001fd2:	1852      	addeq	r2, r2, r1
 8001fd4:	6022      	streq	r2, [r4, #0]
 8001fd6:	6063      	str	r3, [r4, #4]
 8001fd8:	6004      	str	r4, [r0, #0]
 8001fda:	e7ed      	b.n	8001fb8 <_free_r+0x24>
 8001fdc:	4613      	mov	r3, r2
 8001fde:	685a      	ldr	r2, [r3, #4]
 8001fe0:	b10a      	cbz	r2, 8001fe6 <_free_r+0x52>
 8001fe2:	42a2      	cmp	r2, r4
 8001fe4:	d9fa      	bls.n	8001fdc <_free_r+0x48>
 8001fe6:	6819      	ldr	r1, [r3, #0]
 8001fe8:	1858      	adds	r0, r3, r1
 8001fea:	42a0      	cmp	r0, r4
 8001fec:	d10b      	bne.n	8002006 <_free_r+0x72>
 8001fee:	6820      	ldr	r0, [r4, #0]
 8001ff0:	4401      	add	r1, r0
 8001ff2:	1858      	adds	r0, r3, r1
 8001ff4:	4282      	cmp	r2, r0
 8001ff6:	6019      	str	r1, [r3, #0]
 8001ff8:	d1de      	bne.n	8001fb8 <_free_r+0x24>
 8001ffa:	6810      	ldr	r0, [r2, #0]
 8001ffc:	6852      	ldr	r2, [r2, #4]
 8001ffe:	4401      	add	r1, r0
 8002000:	6019      	str	r1, [r3, #0]
 8002002:	605a      	str	r2, [r3, #4]
 8002004:	e7d8      	b.n	8001fb8 <_free_r+0x24>
 8002006:	d902      	bls.n	800200e <_free_r+0x7a>
 8002008:	230c      	movs	r3, #12
 800200a:	602b      	str	r3, [r5, #0]
 800200c:	e7d4      	b.n	8001fb8 <_free_r+0x24>
 800200e:	6820      	ldr	r0, [r4, #0]
 8002010:	1821      	adds	r1, r4, r0
 8002012:	428a      	cmp	r2, r1
 8002014:	bf01      	itttt	eq
 8002016:	6811      	ldreq	r1, [r2, #0]
 8002018:	6852      	ldreq	r2, [r2, #4]
 800201a:	1809      	addeq	r1, r1, r0
 800201c:	6021      	streq	r1, [r4, #0]
 800201e:	6062      	str	r2, [r4, #4]
 8002020:	605c      	str	r4, [r3, #4]
 8002022:	e7c9      	b.n	8001fb8 <_free_r+0x24>
 8002024:	bd38      	pop	{r3, r4, r5, pc}
 8002026:	bf00      	nop
 8002028:	20000094 	.word	0x20000094

0800202c <_malloc_r>:
 800202c:	b570      	push	{r4, r5, r6, lr}
 800202e:	1ccd      	adds	r5, r1, #3
 8002030:	f025 0503 	bic.w	r5, r5, #3
 8002034:	3508      	adds	r5, #8
 8002036:	2d0c      	cmp	r5, #12
 8002038:	bf38      	it	cc
 800203a:	250c      	movcc	r5, #12
 800203c:	2d00      	cmp	r5, #0
 800203e:	4606      	mov	r6, r0
 8002040:	db01      	blt.n	8002046 <_malloc_r+0x1a>
 8002042:	42a9      	cmp	r1, r5
 8002044:	d903      	bls.n	800204e <_malloc_r+0x22>
 8002046:	230c      	movs	r3, #12
 8002048:	6033      	str	r3, [r6, #0]
 800204a:	2000      	movs	r0, #0
 800204c:	bd70      	pop	{r4, r5, r6, pc}
 800204e:	f000 f881 	bl	8002154 <__malloc_lock>
 8002052:	4a23      	ldr	r2, [pc, #140]	; (80020e0 <_malloc_r+0xb4>)
 8002054:	6814      	ldr	r4, [r2, #0]
 8002056:	4621      	mov	r1, r4
 8002058:	b991      	cbnz	r1, 8002080 <_malloc_r+0x54>
 800205a:	4c22      	ldr	r4, [pc, #136]	; (80020e4 <_malloc_r+0xb8>)
 800205c:	6823      	ldr	r3, [r4, #0]
 800205e:	b91b      	cbnz	r3, 8002068 <_malloc_r+0x3c>
 8002060:	4630      	mov	r0, r6
 8002062:	f000 f867 	bl	8002134 <_sbrk_r>
 8002066:	6020      	str	r0, [r4, #0]
 8002068:	4629      	mov	r1, r5
 800206a:	4630      	mov	r0, r6
 800206c:	f000 f862 	bl	8002134 <_sbrk_r>
 8002070:	1c43      	adds	r3, r0, #1
 8002072:	d126      	bne.n	80020c2 <_malloc_r+0x96>
 8002074:	230c      	movs	r3, #12
 8002076:	4630      	mov	r0, r6
 8002078:	6033      	str	r3, [r6, #0]
 800207a:	f000 f86c 	bl	8002156 <__malloc_unlock>
 800207e:	e7e4      	b.n	800204a <_malloc_r+0x1e>
 8002080:	680b      	ldr	r3, [r1, #0]
 8002082:	1b5b      	subs	r3, r3, r5
 8002084:	d41a      	bmi.n	80020bc <_malloc_r+0x90>
 8002086:	2b0b      	cmp	r3, #11
 8002088:	d90f      	bls.n	80020aa <_malloc_r+0x7e>
 800208a:	600b      	str	r3, [r1, #0]
 800208c:	18cc      	adds	r4, r1, r3
 800208e:	50cd      	str	r5, [r1, r3]
 8002090:	4630      	mov	r0, r6
 8002092:	f000 f860 	bl	8002156 <__malloc_unlock>
 8002096:	f104 000b 	add.w	r0, r4, #11
 800209a:	1d23      	adds	r3, r4, #4
 800209c:	f020 0007 	bic.w	r0, r0, #7
 80020a0:	1ac3      	subs	r3, r0, r3
 80020a2:	d01b      	beq.n	80020dc <_malloc_r+0xb0>
 80020a4:	425a      	negs	r2, r3
 80020a6:	50e2      	str	r2, [r4, r3]
 80020a8:	bd70      	pop	{r4, r5, r6, pc}
 80020aa:	428c      	cmp	r4, r1
 80020ac:	bf0b      	itete	eq
 80020ae:	6863      	ldreq	r3, [r4, #4]
 80020b0:	684b      	ldrne	r3, [r1, #4]
 80020b2:	6013      	streq	r3, [r2, #0]
 80020b4:	6063      	strne	r3, [r4, #4]
 80020b6:	bf18      	it	ne
 80020b8:	460c      	movne	r4, r1
 80020ba:	e7e9      	b.n	8002090 <_malloc_r+0x64>
 80020bc:	460c      	mov	r4, r1
 80020be:	6849      	ldr	r1, [r1, #4]
 80020c0:	e7ca      	b.n	8002058 <_malloc_r+0x2c>
 80020c2:	1cc4      	adds	r4, r0, #3
 80020c4:	f024 0403 	bic.w	r4, r4, #3
 80020c8:	42a0      	cmp	r0, r4
 80020ca:	d005      	beq.n	80020d8 <_malloc_r+0xac>
 80020cc:	1a21      	subs	r1, r4, r0
 80020ce:	4630      	mov	r0, r6
 80020d0:	f000 f830 	bl	8002134 <_sbrk_r>
 80020d4:	3001      	adds	r0, #1
 80020d6:	d0cd      	beq.n	8002074 <_malloc_r+0x48>
 80020d8:	6025      	str	r5, [r4, #0]
 80020da:	e7d9      	b.n	8002090 <_malloc_r+0x64>
 80020dc:	bd70      	pop	{r4, r5, r6, pc}
 80020de:	bf00      	nop
 80020e0:	20000094 	.word	0x20000094
 80020e4:	20000098 	.word	0x20000098

080020e8 <_realloc_r>:
 80020e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020ea:	4607      	mov	r7, r0
 80020ec:	4614      	mov	r4, r2
 80020ee:	460e      	mov	r6, r1
 80020f0:	b921      	cbnz	r1, 80020fc <_realloc_r+0x14>
 80020f2:	4611      	mov	r1, r2
 80020f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80020f8:	f7ff bf98 	b.w	800202c <_malloc_r>
 80020fc:	b922      	cbnz	r2, 8002108 <_realloc_r+0x20>
 80020fe:	f7ff ff49 	bl	8001f94 <_free_r>
 8002102:	4625      	mov	r5, r4
 8002104:	4628      	mov	r0, r5
 8002106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002108:	f000 f826 	bl	8002158 <_malloc_usable_size_r>
 800210c:	4284      	cmp	r4, r0
 800210e:	d90f      	bls.n	8002130 <_realloc_r+0x48>
 8002110:	4621      	mov	r1, r4
 8002112:	4638      	mov	r0, r7
 8002114:	f7ff ff8a 	bl	800202c <_malloc_r>
 8002118:	4605      	mov	r5, r0
 800211a:	2800      	cmp	r0, #0
 800211c:	d0f2      	beq.n	8002104 <_realloc_r+0x1c>
 800211e:	4631      	mov	r1, r6
 8002120:	4622      	mov	r2, r4
 8002122:	f7ff ff11 	bl	8001f48 <memcpy>
 8002126:	4631      	mov	r1, r6
 8002128:	4638      	mov	r0, r7
 800212a:	f7ff ff33 	bl	8001f94 <_free_r>
 800212e:	e7e9      	b.n	8002104 <_realloc_r+0x1c>
 8002130:	4635      	mov	r5, r6
 8002132:	e7e7      	b.n	8002104 <_realloc_r+0x1c>

08002134 <_sbrk_r>:
 8002134:	b538      	push	{r3, r4, r5, lr}
 8002136:	2300      	movs	r3, #0
 8002138:	4c05      	ldr	r4, [pc, #20]	; (8002150 <_sbrk_r+0x1c>)
 800213a:	4605      	mov	r5, r0
 800213c:	4608      	mov	r0, r1
 800213e:	6023      	str	r3, [r4, #0]
 8002140:	f000 f814 	bl	800216c <_sbrk>
 8002144:	1c43      	adds	r3, r0, #1
 8002146:	d102      	bne.n	800214e <_sbrk_r+0x1a>
 8002148:	6823      	ldr	r3, [r4, #0]
 800214a:	b103      	cbz	r3, 800214e <_sbrk_r+0x1a>
 800214c:	602b      	str	r3, [r5, #0]
 800214e:	bd38      	pop	{r3, r4, r5, pc}
 8002150:	20000218 	.word	0x20000218

08002154 <__malloc_lock>:
 8002154:	4770      	bx	lr

08002156 <__malloc_unlock>:
 8002156:	4770      	bx	lr

08002158 <_malloc_usable_size_r>:
 8002158:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800215c:	2800      	cmp	r0, #0
 800215e:	f1a0 0004 	sub.w	r0, r0, #4
 8002162:	bfbc      	itt	lt
 8002164:	580b      	ldrlt	r3, [r1, r0]
 8002166:	18c0      	addlt	r0, r0, r3
 8002168:	4770      	bx	lr
	...

0800216c <_sbrk>:
 800216c:	4b04      	ldr	r3, [pc, #16]	; (8002180 <_sbrk+0x14>)
 800216e:	4602      	mov	r2, r0
 8002170:	6819      	ldr	r1, [r3, #0]
 8002172:	b909      	cbnz	r1, 8002178 <_sbrk+0xc>
 8002174:	4903      	ldr	r1, [pc, #12]	; (8002184 <_sbrk+0x18>)
 8002176:	6019      	str	r1, [r3, #0]
 8002178:	6818      	ldr	r0, [r3, #0]
 800217a:	4402      	add	r2, r0
 800217c:	601a      	str	r2, [r3, #0]
 800217e:	4770      	bx	lr
 8002180:	2000009c 	.word	0x2000009c
 8002184:	2000021c 	.word	0x2000021c

08002188 <_init>:
 8002188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800218a:	bf00      	nop
 800218c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800218e:	bc08      	pop	{r3}
 8002190:	469e      	mov	lr, r3
 8002192:	4770      	bx	lr

08002194 <_fini>:
 8002194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002196:	bf00      	nop
 8002198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800219a:	bc08      	pop	{r3}
 800219c:	469e      	mov	lr, r3
 800219e:	4770      	bx	lr
